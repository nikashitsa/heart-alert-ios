// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user_devset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// UDEVSET.BPB=PbUserDeviceSettings

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Data_PbUserDashboardSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Selected dashboard
  var dashboard: Data_PbUserDashboardSettings.PbDashboard {
    get {return _dashboard ?? .basic}
    set {_dashboard = newValue}
  }
  /// Returns true if `dashboard` has been explicitly set.
  var hasDashboard: Bool {return self._dashboard != nil}
  /// Clears the value of `dashboard`. Subsequent reads from it will return its default value.
  mutating func clearDashboard() {self._dashboard = nil}

  /// List of available dashboards
  var availableDashboards: [Data_PbUserDashboardSettings.PbDashboard] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbDashboard: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case basic // = 1
    case activity // = 2
    case trainingLoad // = 3
    case heartRate // = 4
    case sleep // = 5
    case lastTraining // = 6
    case onDemandTraining // = 7
    case weather // = 8
    case weeklySummary // = 9

    init() {
      self = .basic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .basic
      case 2: self = .activity
      case 3: self = .trainingLoad
      case 4: self = .heartRate
      case 5: self = .sleep
      case 6: self = .lastTraining
      case 7: self = .onDemandTraining
      case 8: self = .weather
      case 9: self = .weeklySummary
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .basic: return 1
      case .activity: return 2
      case .trainingLoad: return 3
      case .heartRate: return 4
      case .sleep: return 5
      case .lastTraining: return 6
      case .onDemandTraining: return 7
      case .weather: return 8
      case .weeklySummary: return 9
      }
    }

  }

  init() {}

  fileprivate var _dashboard: Data_PbUserDashboardSettings.PbDashboard? = nil
}

struct Data_PbUserDeviceGeneralSettings: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var obsoleteTimeSelection: PbTimeSelection {
    get {return _storage._obsoleteTimeSelection ?? .time1}
    set {_uniqueStorage()._obsoleteTimeSelection = newValue}
  }
  /// Returns true if `obsoleteTimeSelection` has been explicitly set.
  var hasObsoleteTimeSelection: Bool {return _storage._obsoleteTimeSelection != nil}
  /// Clears the value of `obsoleteTimeSelection`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteTimeSelection() {_uniqueStorage()._obsoleteTimeSelection = nil}

  /// Offset of time 2, in minutes
  /// range [-1440..1440] (+- 24 hours)
  var obsoleteTime2Offset: Int32 {
    get {return _storage._obsoleteTime2Offset ?? 0}
    set {_uniqueStorage()._obsoleteTime2Offset = newValue}
  }
  /// Returns true if `obsoleteTime2Offset` has been explicitly set.
  var hasObsoleteTime2Offset: Bool {return _storage._obsoleteTime2Offset != nil}
  /// Clears the value of `obsoleteTime2Offset`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteTime2Offset() {_uniqueStorage()._obsoleteTime2Offset = nil}

  var watchFace: Data_PbUserDeviceGeneralSettings.PbWatchFace {
    get {return _storage._watchFace ?? .basic}
    set {_uniqueStorage()._watchFace = newValue}
  }
  /// Returns true if `watchFace` has been explicitly set.
  var hasWatchFace: Bool {return _storage._watchFace != nil}
  /// Clears the value of `watchFace`. Subsequent reads from it will return its default value.
  mutating func clearWatchFace() {_uniqueStorage()._watchFace = nil}

  var buttonLockMode: Data_PbUserDeviceGeneralSettings.PbButtonLockMode {
    get {return _storage._buttonLockMode ?? .manual}
    set {_uniqueStorage()._buttonLockMode = newValue}
  }
  /// Returns true if `buttonLockMode` has been explicitly set.
  var hasButtonLockMode: Bool {return _storage._buttonLockMode != nil}
  /// Clears the value of `buttonLockMode`. Subsequent reads from it will return its default value.
  mutating func clearButtonLockMode() {_uniqueStorage()._buttonLockMode = nil}

  var buttonSoundVolume: PbVolume {
    get {return _storage._buttonSoundVolume ?? PbVolume()}
    set {_uniqueStorage()._buttonSoundVolume = newValue}
  }
  /// Returns true if `buttonSoundVolume` has been explicitly set.
  var hasButtonSoundVolume: Bool {return _storage._buttonSoundVolume != nil}
  /// Clears the value of `buttonSoundVolume`. Subsequent reads from it will return its default value.
  mutating func clearButtonSoundVolume() {_uniqueStorage()._buttonSoundVolume = nil}

  /// Boolean toggle: is vibra enabled or not
  var vibrationMode: Bool {
    get {return _storage._vibrationMode ?? false}
    set {_uniqueStorage()._vibrationMode = newValue}
  }
  /// Returns true if `vibrationMode` has been explicitly set.
  var hasVibrationMode: Bool {return _storage._vibrationMode != nil}
  /// Clears the value of `vibrationMode`. Subsequent reads from it will return its default value.
  mutating func clearVibrationMode() {_uniqueStorage()._vibrationMode = nil}

  var obsoleteHandedness: PbHandedness {
    get {return _storage._obsoleteHandedness ?? .wuInLeftHand}
    set {_uniqueStorage()._obsoleteHandedness = newValue}
  }
  /// Returns true if `obsoleteHandedness` has been explicitly set.
  var hasObsoleteHandedness: Bool {return _storage._obsoleteHandedness != nil}
  /// Clears the value of `obsoleteHandedness`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteHandedness() {_uniqueStorage()._obsoleteHandedness = nil}

  var exeviewInverted: Bool {
    get {return _storage._exeviewInverted ?? false}
    set {_uniqueStorage()._exeviewInverted = newValue}
  }
  /// Returns true if `exeviewInverted` has been explicitly set.
  var hasExeviewInverted: Bool {return _storage._exeviewInverted != nil}
  /// Clears the value of `exeviewInverted`. Subsequent reads from it will return its default value.
  mutating func clearExeviewInverted() {_uniqueStorage()._exeviewInverted = nil}

  var tapButtonSensitivity: Data_PbUserDeviceGeneralSettings.PbTapButtonSensitivity {
    get {return _storage._tapButtonSensitivity ?? .tapButtonSensitivityOff}
    set {_uniqueStorage()._tapButtonSensitivity = newValue}
  }
  /// Returns true if `tapButtonSensitivity` has been explicitly set.
  var hasTapButtonSensitivity: Bool {return _storage._tapButtonSensitivity != nil}
  /// Clears the value of `tapButtonSensitivity`. Subsequent reads from it will return its default value.
  mutating func clearTapButtonSensitivity() {_uniqueStorage()._tapButtonSensitivity = nil}

  var inactivityAlert: Data_PbUserDeviceGeneralSettings.PbInactivityAlert {
    get {return _storage._inactivityAlert ?? .inactivityAlertOff}
    set {_uniqueStorage()._inactivityAlert = newValue}
  }
  /// Returns true if `inactivityAlert` has been explicitly set.
  var hasInactivityAlert: Bool {return _storage._inactivityAlert != nil}
  /// Clears the value of `inactivityAlert`. Subsequent reads from it will return its default value.
  mutating func clearInactivityAlert() {_uniqueStorage()._inactivityAlert = nil}

  /// enabling means that ble connections are possible
  var bleConnectModeEnable: Bool {
    get {return _storage._bleConnectModeEnable ?? false}
    set {_uniqueStorage()._bleConnectModeEnable = newValue}
  }
  /// Returns true if `bleConnectModeEnable` has been explicitly set.
  var hasBleConnectModeEnable: Bool {return _storage._bleConnectModeEnable != nil}
  /// Clears the value of `bleConnectModeEnable`. Subsequent reads from it will return its default value.
  mutating func clearBleConnectModeEnable() {_uniqueStorage()._bleConnectModeEnable = nil}

  var backupWatchFace: Data_PbUserDeviceGeneralSettings.PbWatchFace {
    get {return _storage._backupWatchFace ?? .basic}
    set {_uniqueStorage()._backupWatchFace = newValue}
  }
  /// Returns true if `backupWatchFace` has been explicitly set.
  var hasBackupWatchFace: Bool {return _storage._backupWatchFace != nil}
  /// Clears the value of `backupWatchFace`. Subsequent reads from it will return its default value.
  mutating func clearBackupWatchFace() {_uniqueStorage()._backupWatchFace = nil}

  var flightmode: Data_PbUserDeviceGeneralSettings.PbFlightMode {
    get {return _storage._flightmode ?? .flightmodeOff}
    set {_uniqueStorage()._flightmode = newValue}
  }
  /// Returns true if `flightmode` has been explicitly set.
  var hasFlightmode: Bool {return _storage._flightmode != nil}
  /// Clears the value of `flightmode`. Subsequent reads from it will return its default value.
  mutating func clearFlightmode() {_uniqueStorage()._flightmode = nil}

  /// Device location on user
  var deviceLocation: PbDeviceLocation {
    get {return _storage._deviceLocation ?? .deviceLocationUndefined}
    set {_uniqueStorage()._deviceLocation = newValue}
  }
  /// Returns true if `deviceLocation` has been explicitly set.
  var hasDeviceLocation: Bool {return _storage._deviceLocation != nil}
  /// Clears the value of `deviceLocation`. Subsequent reads from it will return its default value.
  mutating func clearDeviceLocation() {_uniqueStorage()._deviceLocation = nil}

  /// Watch face color in format 0xBBGGRR
  var watchFaceColor: UInt32 {
    get {return _storage._watchFaceColor ?? 0}
    set {_uniqueStorage()._watchFaceColor = newValue}
  }
  /// Returns true if `watchFaceColor` has been explicitly set.
  var hasWatchFaceColor: Bool {return _storage._watchFaceColor != nil}
  /// Clears the value of `watchFaceColor`. Subsequent reads from it will return its default value.
  mutating func clearWatchFaceColor() {_uniqueStorage()._watchFaceColor = nil}

  var dashboardSettings: Data_PbUserDashboardSettings {
    get {return _storage._dashboardSettings ?? Data_PbUserDashboardSettings()}
    set {_uniqueStorage()._dashboardSettings = newValue}
  }
  /// Returns true if `dashboardSettings` has been explicitly set.
  var hasDashboardSettings: Bool {return _storage._dashboardSettings != nil}
  /// Clears the value of `dashboardSettings`. Subsequent reads from it will return its default value.
  mutating func clearDashboardSettings() {_uniqueStorage()._dashboardSettings = nil}

  var vibrationFeedbackMode: Data_PbUserDeviceGeneralSettings.PbVibrationFeedbackMode {
    get {return _storage._vibrationFeedbackMode ?? .vibrationFeedbackDisabled}
    set {_uniqueStorage()._vibrationFeedbackMode = newValue}
  }
  /// Returns true if `vibrationFeedbackMode` has been explicitly set.
  var hasVibrationFeedbackMode: Bool {return _storage._vibrationFeedbackMode != nil}
  /// Clears the value of `vibrationFeedbackMode`. Subsequent reads from it will return its default value.
  mutating func clearVibrationFeedbackMode() {_uniqueStorage()._vibrationFeedbackMode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbWatchFace: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case basic // = 1
    case award // = 2
    case userName // = 3
    case event // = 4
    case analog // = 5
    case big // = 6
    case activity // = 7
    case bigAnalog // = 8
    case whiteAnalog // = 9
    case jumbo // = 10
    case bigDigits // = 11
    case activityCircle // = 12

    init() {
      self = .basic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .basic
      case 2: self = .award
      case 3: self = .userName
      case 4: self = .event
      case 5: self = .analog
      case 6: self = .big
      case 7: self = .activity
      case 8: self = .bigAnalog
      case 9: self = .whiteAnalog
      case 10: self = .jumbo
      case 11: self = .bigDigits
      case 12: self = .activityCircle
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .basic: return 1
      case .award: return 2
      case .userName: return 3
      case .event: return 4
      case .analog: return 5
      case .big: return 6
      case .activity: return 7
      case .bigAnalog: return 8
      case .whiteAnalog: return 9
      case .jumbo: return 10
      case .bigDigits: return 11
      case .activityCircle: return 12
      }
    }

  }

  enum PbButtonLockMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case manual // = 1
    case auto // = 2

    init() {
      self = .manual
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .manual
      case 2: self = .auto
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .manual: return 1
      case .auto: return 2
      }
    }

  }

  /// Tap sensitivity
  /// OFF - tap function off
  /// VERY LOW - very hard tap required
  /// LOW - hard tap required
  /// MEDIUM - moderately hard tap required
  /// HIGH - light tap required
  enum PbTapButtonSensitivity: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case tapButtonSensitivityOff // = 1

    /// Note the enum value!
    case tapButtonSensitivityVeryLow // = 5
    case tapButtonSensitivityLow // = 2
    case tapButtonSensitivityMedium // = 3
    case tapButtonSensitivityHigh // = 4

    init() {
      self = .tapButtonSensitivityOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .tapButtonSensitivityOff
      case 2: self = .tapButtonSensitivityLow
      case 3: self = .tapButtonSensitivityMedium
      case 4: self = .tapButtonSensitivityHigh
      case 5: self = .tapButtonSensitivityVeryLow
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .tapButtonSensitivityOff: return 1
      case .tapButtonSensitivityLow: return 2
      case .tapButtonSensitivityMedium: return 3
      case .tapButtonSensitivityHigh: return 4
      case .tapButtonSensitivityVeryLow: return 5
      }
    }

  }

  enum PbInactivityAlert: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case inactivityAlertOff // = 1
    case inactivityAlertOn // = 2

    init() {
      self = .inactivityAlertOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .inactivityAlertOff
      case 2: self = .inactivityAlertOn
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .inactivityAlertOff: return 1
      case .inactivityAlertOn: return 2
      }
    }

  }

  enum PbFlightMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case flightmodeOff // = 1
    case flightmodeOn // = 2

    init() {
      self = .flightmodeOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .flightmodeOff
      case 2: self = .flightmodeOn
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .flightmodeOff: return 1
      case .flightmodeOn: return 2
      }
    }

  }

  /// Vibration feedback mode
  /// Defined how/if WU provides feedback based on user interaction
  /// such as button presses & touch gestures.
  enum PbVibrationFeedbackMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case vibrationFeedbackDisabled // = 0
    case vibrationFeedbackEnabled // = 2

    init() {
      self = .vibrationFeedbackDisabled
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .vibrationFeedbackDisabled
      case 2: self = .vibrationFeedbackEnabled
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .vibrationFeedbackDisabled: return 0
      case .vibrationFeedbackEnabled: return 2
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Data_PbUserDeviceAlarmSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alarmMode: Data_PbUserDeviceAlarmSettings.PbAlarmMode {
    get {return _alarmMode ?? .alarmModeOff}
    set {_alarmMode = newValue}
  }
  /// Returns true if `alarmMode` has been explicitly set.
  var hasAlarmMode: Bool {return self._alarmMode != nil}
  /// Clears the value of `alarmMode`. Subsequent reads from it will return its default value.
  mutating func clearAlarmMode() {self._alarmMode = nil}

  var alarmTime: PbTime {
    get {return _alarmTime ?? PbTime()}
    set {_alarmTime = newValue}
  }
  /// Returns true if `alarmTime` has been explicitly set.
  var hasAlarmTime: Bool {return self._alarmTime != nil}
  /// Clears the value of `alarmTime`. Subsequent reads from it will return its default value.
  mutating func clearAlarmTime() {self._alarmTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbAlarmMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case alarmModeOff // = 1
    case alarmModeOnce // = 2
    case alarmModeMonToFri // = 3
    case alarmModeEveryDay // = 4

    init() {
      self = .alarmModeOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .alarmModeOff
      case 2: self = .alarmModeOnce
      case 3: self = .alarmModeMonToFri
      case 4: self = .alarmModeEveryDay
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .alarmModeOff: return 1
      case .alarmModeOnce: return 2
      case .alarmModeMonToFri: return 3
      case .alarmModeEveryDay: return 4
      }
    }

  }

  init() {}

  fileprivate var _alarmMode: Data_PbUserDeviceAlarmSettings.PbAlarmMode? = nil
  fileprivate var _alarmTime: PbTime? = nil
}

struct Data_PbOrthostaticTestSchedule: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  ///Scheduled orthostatic test weekdays,
  ///TRUE = scheduled,  FALSE = Not scheduled
  var mondayScheduled: Bool {
    get {return _mondayScheduled ?? false}
    set {_mondayScheduled = newValue}
  }
  /// Returns true if `mondayScheduled` has been explicitly set.
  var hasMondayScheduled: Bool {return self._mondayScheduled != nil}
  /// Clears the value of `mondayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearMondayScheduled() {self._mondayScheduled = nil}

  var tuesdayScheduled: Bool {
    get {return _tuesdayScheduled ?? false}
    set {_tuesdayScheduled = newValue}
  }
  /// Returns true if `tuesdayScheduled` has been explicitly set.
  var hasTuesdayScheduled: Bool {return self._tuesdayScheduled != nil}
  /// Clears the value of `tuesdayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearTuesdayScheduled() {self._tuesdayScheduled = nil}

  var wednesdayScheduled: Bool {
    get {return _wednesdayScheduled ?? false}
    set {_wednesdayScheduled = newValue}
  }
  /// Returns true if `wednesdayScheduled` has been explicitly set.
  var hasWednesdayScheduled: Bool {return self._wednesdayScheduled != nil}
  /// Clears the value of `wednesdayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearWednesdayScheduled() {self._wednesdayScheduled = nil}

  var thursdayScheduled: Bool {
    get {return _thursdayScheduled ?? false}
    set {_thursdayScheduled = newValue}
  }
  /// Returns true if `thursdayScheduled` has been explicitly set.
  var hasThursdayScheduled: Bool {return self._thursdayScheduled != nil}
  /// Clears the value of `thursdayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearThursdayScheduled() {self._thursdayScheduled = nil}

  var fridayScheduled: Bool {
    get {return _fridayScheduled ?? false}
    set {_fridayScheduled = newValue}
  }
  /// Returns true if `fridayScheduled` has been explicitly set.
  var hasFridayScheduled: Bool {return self._fridayScheduled != nil}
  /// Clears the value of `fridayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearFridayScheduled() {self._fridayScheduled = nil}

  var saturdayScheduled: Bool {
    get {return _saturdayScheduled ?? false}
    set {_saturdayScheduled = newValue}
  }
  /// Returns true if `saturdayScheduled` has been explicitly set.
  var hasSaturdayScheduled: Bool {return self._saturdayScheduled != nil}
  /// Clears the value of `saturdayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearSaturdayScheduled() {self._saturdayScheduled = nil}

  var sundayScheduled: Bool {
    get {return _sundayScheduled ?? false}
    set {_sundayScheduled = newValue}
  }
  /// Returns true if `sundayScheduled` has been explicitly set.
  var hasSundayScheduled: Bool {return self._sundayScheduled != nil}
  /// Clears the value of `sundayScheduled`. Subsequent reads from it will return its default value.
  mutating func clearSundayScheduled() {self._sundayScheduled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mondayScheduled: Bool? = nil
  fileprivate var _tuesdayScheduled: Bool? = nil
  fileprivate var _wednesdayScheduled: Bool? = nil
  fileprivate var _thursdayScheduled: Bool? = nil
  fileprivate var _fridayScheduled: Bool? = nil
  fileprivate var _saturdayScheduled: Bool? = nil
  fileprivate var _sundayScheduled: Bool? = nil
}

struct Data_PbUserDeviceCountdownSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var countdownTime: PbDuration {
    get {return _countdownTime ?? PbDuration()}
    set {_countdownTime = newValue}
  }
  /// Returns true if `countdownTime` has been explicitly set.
  var hasCountdownTime: Bool {return self._countdownTime != nil}
  /// Clears the value of `countdownTime`. Subsequent reads from it will return its default value.
  mutating func clearCountdownTime() {self._countdownTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _countdownTime: PbDuration? = nil
}

struct Data_PbUserDeviceJumpTestSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contJumpDuration: PbDuration {
    get {return _contJumpDuration ?? PbDuration()}
    set {_contJumpDuration = newValue}
  }
  /// Returns true if `contJumpDuration` has been explicitly set.
  var hasContJumpDuration: Bool {return self._contJumpDuration != nil}
  /// Clears the value of `contJumpDuration`. Subsequent reads from it will return its default value.
  mutating func clearContJumpDuration() {self._contJumpDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contJumpDuration: PbDuration? = nil
}

struct Data_PbIntervalTimerValue: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intervalTimerType: Data_PbIntervalTimerValue.PbIntervalTimerType {
    get {return _intervalTimerType ?? .intervalTimerTypeDuration}
    set {_intervalTimerType = newValue}
  }
  /// Returns true if `intervalTimerType` has been explicitly set.
  var hasIntervalTimerType: Bool {return self._intervalTimerType != nil}
  /// Clears the value of `intervalTimerType`. Subsequent reads from it will return its default value.
  mutating func clearIntervalTimerType() {self._intervalTimerType = nil}

  var intervalTimerDuration: PbDuration {
    get {return _intervalTimerDuration ?? PbDuration()}
    set {_intervalTimerDuration = newValue}
  }
  /// Returns true if `intervalTimerDuration` has been explicitly set.
  var hasIntervalTimerDuration: Bool {return self._intervalTimerDuration != nil}
  /// Clears the value of `intervalTimerDuration`. Subsequent reads from it will return its default value.
  mutating func clearIntervalTimerDuration() {self._intervalTimerDuration = nil}

  var intervalTimerDistance: Float {
    get {return _intervalTimerDistance ?? 0}
    set {_intervalTimerDistance = newValue}
  }
  /// Returns true if `intervalTimerDistance` has been explicitly set.
  var hasIntervalTimerDistance: Bool {return self._intervalTimerDistance != nil}
  /// Clears the value of `intervalTimerDistance`. Subsequent reads from it will return its default value.
  mutating func clearIntervalTimerDistance() {self._intervalTimerDistance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbIntervalTimerType: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case intervalTimerTypeDuration // = 1
    case intervalTimerTypeDistance // = 2

    init() {
      self = .intervalTimerTypeDuration
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .intervalTimerTypeDuration
      case 2: self = .intervalTimerTypeDistance
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .intervalTimerTypeDuration: return 1
      case .intervalTimerTypeDistance: return 2
      }
    }

  }

  init() {}

  fileprivate var _intervalTimerType: Data_PbIntervalTimerValue.PbIntervalTimerType? = nil
  fileprivate var _intervalTimerDuration: PbDuration? = nil
  fileprivate var _intervalTimerDistance: Float? = nil
}

struct Data_PbUserIntervalTimerSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var intervalTimerValue: [Data_PbIntervalTimerValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Data_PbUserEndTimeEstimatorSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var endTimeEstimatorTarget: Float {
    get {return _endTimeEstimatorTarget ?? 0}
    set {_endTimeEstimatorTarget = newValue}
  }
  /// Returns true if `endTimeEstimatorTarget` has been explicitly set.
  var hasEndTimeEstimatorTarget: Bool {return self._endTimeEstimatorTarget != nil}
  /// Clears the value of `endTimeEstimatorTarget`. Subsequent reads from it will return its default value.
  mutating func clearEndTimeEstimatorTarget() {self._endTimeEstimatorTarget = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _endTimeEstimatorTarget: Float? = nil
}

struct Data_PbUserDeviceResearchSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accelerometerRawDataEnable: Bool {
    get {return _accelerometerRawDataEnable ?? false}
    set {_accelerometerRawDataEnable = newValue}
  }
  /// Returns true if `accelerometerRawDataEnable` has been explicitly set.
  var hasAccelerometerRawDataEnable: Bool {return self._accelerometerRawDataEnable != nil}
  /// Clears the value of `accelerometerRawDataEnable`. Subsequent reads from it will return its default value.
  mutating func clearAccelerometerRawDataEnable() {self._accelerometerRawDataEnable = nil}

  var gyroscopeRawDataEnable: Bool {
    get {return _gyroscopeRawDataEnable ?? false}
    set {_gyroscopeRawDataEnable = newValue}
  }
  /// Returns true if `gyroscopeRawDataEnable` has been explicitly set.
  var hasGyroscopeRawDataEnable: Bool {return self._gyroscopeRawDataEnable != nil}
  /// Clears the value of `gyroscopeRawDataEnable`. Subsequent reads from it will return its default value.
  mutating func clearGyroscopeRawDataEnable() {self._gyroscopeRawDataEnable = nil}

  var magnetometerRawDataEnable: Bool {
    get {return _magnetometerRawDataEnable ?? false}
    set {_magnetometerRawDataEnable = newValue}
  }
  /// Returns true if `magnetometerRawDataEnable` has been explicitly set.
  var hasMagnetometerRawDataEnable: Bool {return self._magnetometerRawDataEnable != nil}
  /// Clears the value of `magnetometerRawDataEnable`. Subsequent reads from it will return its default value.
  mutating func clearMagnetometerRawDataEnable() {self._magnetometerRawDataEnable = nil}

  var linearAccelerationDataEnable: Bool {
    get {return _linearAccelerationDataEnable ?? false}
    set {_linearAccelerationDataEnable = newValue}
  }
  /// Returns true if `linearAccelerationDataEnable` has been explicitly set.
  var hasLinearAccelerationDataEnable: Bool {return self._linearAccelerationDataEnable != nil}
  /// Clears the value of `linearAccelerationDataEnable`. Subsequent reads from it will return its default value.
  mutating func clearLinearAccelerationDataEnable() {self._linearAccelerationDataEnable = nil}

  var gpsDataEnable: Bool {
    get {return _gpsDataEnable ?? false}
    set {_gpsDataEnable = newValue}
  }
  /// Returns true if `gpsDataEnable` has been explicitly set.
  var hasGpsDataEnable: Bool {return self._gpsDataEnable != nil}
  /// Clears the value of `gpsDataEnable`. Subsequent reads from it will return its default value.
  mutating func clearGpsDataEnable() {self._gpsDataEnable = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _accelerometerRawDataEnable: Bool? = nil
  fileprivate var _gyroscopeRawDataEnable: Bool? = nil
  fileprivate var _magnetometerRawDataEnable: Bool? = nil
  fileprivate var _linearAccelerationDataEnable: Bool? = nil
  fileprivate var _gpsDataEnable: Bool? = nil
}

struct Data_PbUserSafetyLightSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mode: Data_PbUserSafetyLightSettings.PbSafetyLightMode {
    get {return _mode ?? .safetyLightManual}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var activationLevel: Data_PbUserSafetyLightSettings.PbSafetyLightActivationLevel {
    get {return _activationLevel ?? .activationLevelDark}
    set {_activationLevel = newValue}
  }
  /// Returns true if `activationLevel` has been explicitly set.
  var hasActivationLevel: Bool {return self._activationLevel != nil}
  /// Clears the value of `activationLevel`. Subsequent reads from it will return its default value.
  mutating func clearActivationLevel() {self._activationLevel = nil}

  var blinkRate: Data_PbUserSafetyLightSettings.PbSafetyLightBlinkRate {
    get {return _blinkRate ?? .blinkRateOff}
    set {_blinkRate = newValue}
  }
  /// Returns true if `blinkRate` has been explicitly set.
  var hasBlinkRate: Bool {return self._blinkRate != nil}
  /// Clears the value of `blinkRate`. Subsequent reads from it will return its default value.
  mutating func clearBlinkRate() {self._blinkRate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbSafetyLightMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case safetyLightManual // = 1
    case safetyLightAutomatic // = 2

    init() {
      self = .safetyLightManual
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .safetyLightManual
      case 2: self = .safetyLightAutomatic
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .safetyLightManual: return 1
      case .safetyLightAutomatic: return 2
      }
    }

  }

  enum PbSafetyLightActivationLevel: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case activationLevelDark // = 1
    case activationLevelDusk // = 2
    case activationLevelLight // = 3

    init() {
      self = .activationLevelDark
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .activationLevelDark
      case 2: self = .activationLevelDusk
      case 3: self = .activationLevelLight
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .activationLevelDark: return 1
      case .activationLevelDusk: return 2
      case .activationLevelLight: return 3
      }
    }

  }

  enum PbSafetyLightBlinkRate: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case blinkRateOff // = 1
    case blinkRateSlow // = 2
    case blinkRateFast // = 3
    case blinkRateVeryFast // = 4

    init() {
      self = .blinkRateOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .blinkRateOff
      case 2: self = .blinkRateSlow
      case 3: self = .blinkRateFast
      case 4: self = .blinkRateVeryFast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .blinkRateOff: return 1
      case .blinkRateSlow: return 2
      case .blinkRateFast: return 3
      case .blinkRateVeryFast: return 4
      }
    }

  }

  init() {}

  fileprivate var _mode: Data_PbUserSafetyLightSettings.PbSafetyLightMode? = nil
  fileprivate var _activationLevel: Data_PbUserSafetyLightSettings.PbSafetyLightActivationLevel? = nil
  fileprivate var _blinkRate: Data_PbUserSafetyLightSettings.PbSafetyLightBlinkRate? = nil
}

struct Data_PbDoNotDisturbSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var start: PbTime {
    get {return _start ?? PbTime()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: PbTime {
    get {return _end ?? PbTime()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enabled: Bool? = nil
  fileprivate var _start: PbTime? = nil
  fileprivate var _end: PbTime? = nil
}

struct Data_PbUserSmartWatchNotificationSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var previewEnabled: Bool {
    get {return _previewEnabled ?? false}
    set {_previewEnabled = newValue}
  }
  /// Returns true if `previewEnabled` has been explicitly set.
  var hasPreviewEnabled: Bool {return self._previewEnabled != nil}
  /// Clears the value of `previewEnabled`. Subsequent reads from it will return its default value.
  mutating func clearPreviewEnabled() {self._previewEnabled = nil}

  var doNotDisturbSettings: Data_PbDoNotDisturbSettings {
    get {return _doNotDisturbSettings ?? Data_PbDoNotDisturbSettings()}
    set {_doNotDisturbSettings = newValue}
  }
  /// Returns true if `doNotDisturbSettings` has been explicitly set.
  var hasDoNotDisturbSettings: Bool {return self._doNotDisturbSettings != nil}
  /// Clears the value of `doNotDisturbSettings`. Subsequent reads from it will return its default value.
  mutating func clearDoNotDisturbSettings() {self._doNotDisturbSettings = nil}

  var soundsEnabled: Bool {
    get {return _soundsEnabled ?? false}
    set {_soundsEnabled = newValue}
  }
  /// Returns true if `soundsEnabled` has been explicitly set.
  var hasSoundsEnabled: Bool {return self._soundsEnabled != nil}
  /// Clears the value of `soundsEnabled`. Subsequent reads from it will return its default value.
  mutating func clearSoundsEnabled() {self._soundsEnabled = nil}

  var onDuringTraining: Bool {
    get {return _onDuringTraining ?? false}
    set {_onDuringTraining = newValue}
  }
  /// Returns true if `onDuringTraining` has been explicitly set.
  var hasOnDuringTraining: Bool {return self._onDuringTraining != nil}
  /// Clears the value of `onDuringTraining`. Subsequent reads from it will return its default value.
  mutating func clearOnDuringTraining() {self._onDuringTraining = nil}

  var onWhenNotTraining: Bool {
    get {return _onWhenNotTraining ?? false}
    set {_onWhenNotTraining = newValue}
  }
  /// Returns true if `onWhenNotTraining` has been explicitly set.
  var hasOnWhenNotTraining: Bool {return self._onWhenNotTraining != nil}
  /// Clears the value of `onWhenNotTraining`. Subsequent reads from it will return its default value.
  mutating func clearOnWhenNotTraining() {self._onWhenNotTraining = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enabled: Bool? = nil
  fileprivate var _previewEnabled: Bool? = nil
  fileprivate var _doNotDisturbSettings: Data_PbDoNotDisturbSettings? = nil
  fileprivate var _soundsEnabled: Bool? = nil
  fileprivate var _onDuringTraining: Bool? = nil
  fileprivate var _onWhenNotTraining: Bool? = nil
}

struct Data_PbUserMapSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mapTopDirection: Data_PbUserMapSettings.PbMapTopDirection {
    get {return _mapTopDirection ?? .topDirectionNorth}
    set {_mapTopDirection = newValue}
  }
  /// Returns true if `mapTopDirection` has been explicitly set.
  var hasMapTopDirection: Bool {return self._mapTopDirection != nil}
  /// Clears the value of `mapTopDirection`. Subsequent reads from it will return its default value.
  mutating func clearMapTopDirection() {self._mapTopDirection = nil}

  var altitudeDataEnabled: Bool {
    get {return _altitudeDataEnabled ?? false}
    set {_altitudeDataEnabled = newValue}
  }
  /// Returns true if `altitudeDataEnabled` has been explicitly set.
  var hasAltitudeDataEnabled: Bool {return self._altitudeDataEnabled != nil}
  /// Clears the value of `altitudeDataEnabled`. Subsequent reads from it will return its default value.
  mutating func clearAltitudeDataEnabled() {self._altitudeDataEnabled = nil}

  var bikeRouteDataEnabled: Bool {
    get {return _bikeRouteDataEnabled ?? false}
    set {_bikeRouteDataEnabled = newValue}
  }
  /// Returns true if `bikeRouteDataEnabled` has been explicitly set.
  var hasBikeRouteDataEnabled: Bool {return self._bikeRouteDataEnabled != nil}
  /// Clears the value of `bikeRouteDataEnabled`. Subsequent reads from it will return its default value.
  mutating func clearBikeRouteDataEnabled() {self._bikeRouteDataEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbMapTopDirection: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int

    /// Top of the map points to north
    case topDirectionNorth // = 1

    /// Top of the map points to driving direction
    case topDirectionHeading // = 2

    init() {
      self = .topDirectionNorth
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .topDirectionNorth
      case 2: self = .topDirectionHeading
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .topDirectionNorth: return 1
      case .topDirectionHeading: return 2
      }
    }

  }

  init() {}

  fileprivate var _mapTopDirection: Data_PbUserMapSettings.PbMapTopDirection? = nil
  fileprivate var _altitudeDataEnabled: Bool? = nil
  fileprivate var _bikeRouteDataEnabled: Bool? = nil
}

struct Data_PbUserDeviceRinseDryMessageSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageCount: UInt32 {
    get {return _messageCount ?? 0}
    set {_messageCount = newValue}
  }
  /// Returns true if `messageCount` has been explicitly set.
  var hasMessageCount: Bool {return self._messageCount != nil}
  /// Clears the value of `messageCount`. Subsequent reads from it will return its default value.
  mutating func clearMessageCount() {self._messageCount = nil}

  var lastModified: PbSystemDateTime {
    get {return _lastModified ?? PbSystemDateTime()}
    set {_lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return self._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {self._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _messageCount: UInt32? = nil
  fileprivate var _lastModified: PbSystemDateTime? = nil
}

/// Setting written to device for device mass storage mode.
/// True when mass storage mode is activated on device.
struct Data_PbUserDeviceMassStorageSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enabled: Bool? = nil
}

struct Data_PbTimedDoNotDisturbSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: PbTime {
    get {return _start ?? PbTime()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: PbTime {
    get {return _end ?? PbTime()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _start: PbTime? = nil
  fileprivate var _end: PbTime? = nil
}

struct Data_PbUserDeviceDoNotDisturbSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var doNotDisturbOn: Bool {
    get {return _doNotDisturbOn ?? false}
    set {_doNotDisturbOn = newValue}
  }
  /// Returns true if `doNotDisturbOn` has been explicitly set.
  var hasDoNotDisturbOn: Bool {return self._doNotDisturbOn != nil}
  /// Clears the value of `doNotDisturbOn`. Subsequent reads from it will return its default value.
  mutating func clearDoNotDisturbOn() {self._doNotDisturbOn = nil}

  var settingSource: Data_PbUserDeviceDoNotDisturbSettings.PbDoNotDisturbSettingSource {
    get {return _settingSource ?? .sourceUser}
    set {_settingSource = newValue}
  }
  /// Returns true if `settingSource` has been explicitly set.
  var hasSettingSource: Bool {return self._settingSource != nil}
  /// Clears the value of `settingSource`. Subsequent reads from it will return its default value.
  mutating func clearSettingSource() {self._settingSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbDoNotDisturbSettingSource: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case sourceUser // = 0
    case sourceTimed // = 1

    init() {
      self = .sourceUser
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sourceUser
      case 1: self = .sourceTimed
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .sourceUser: return 0
      case .sourceTimed: return 1
      }
    }

  }

  init() {}

  fileprivate var _doNotDisturbOn: Bool? = nil
  fileprivate var _settingSource: Data_PbUserDeviceDoNotDisturbSettings.PbDoNotDisturbSettingSource? = nil
}

struct Data_PbUserDeviceDoNotDisturbSettings_v2: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: Data_PbUserDeviceDoNotDisturbSettings_v2.PbDoNotDisturbState {
    get {return _state ?? .off}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var timedSettings: Data_PbTimedDoNotDisturbSettings {
    get {return _timedSettings ?? Data_PbTimedDoNotDisturbSettings()}
    set {_timedSettings = newValue}
  }
  /// Returns true if `timedSettings` has been explicitly set.
  var hasTimedSettings: Bool {return self._timedSettings != nil}
  /// Clears the value of `timedSettings`. Subsequent reads from it will return its default value.
  mutating func clearTimedSettings() {self._timedSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbDoNotDisturbState: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case off // = 0
    case on // = 1
    case timed // = 2

    init() {
      self = .off
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .off
      case 1: self = .on
      case 2: self = .timed
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .off: return 0
      case .on: return 1
      case .timed: return 2
      }
    }

  }

  init() {}

  fileprivate var _state: Data_PbUserDeviceDoNotDisturbSettings_v2.PbDoNotDisturbState? = nil
  fileprivate var _timedSettings: Data_PbTimedDoNotDisturbSettings? = nil
}

struct Data_PbUserDeviceAutoSyncSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This setting only affects syncing between WU and mobile app.
  /// When enabled syncing can be done without user action.
  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enabled: Bool? = nil
}

struct Data_PbUserDeviceAutomaticSampleSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ohr247Enabled: Bool {
    get {return _ohr247Enabled ?? false}
    set {_ohr247Enabled = newValue}
  }
  /// Returns true if `ohr247Enabled` has been explicitly set.
  var hasOhr247Enabled: Bool {return self._ohr247Enabled != nil}
  /// Clears the value of `ohr247Enabled`. Subsequent reads from it will return its default value.
  mutating func clearOhr247Enabled() {self._ohr247Enabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ohr247Enabled: Bool? = nil
}

struct Data_PbTimedMeasurementSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Clock times for measurement start and end. End time can be bigger than start time.
  /// For example start time 16:00 and end time 13:00 means that measurement is off between 13:00 and 16:00.
  var startTime: PbTime {
    get {return _startTime ?? PbTime()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var endTime: PbTime {
    get {return _endTime ?? PbTime()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: PbTime? = nil
  fileprivate var _endTime: PbTime? = nil
}

struct Data_PbIntelligentTimedMeasurementSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Clock time for measurement start. Measurement is stopped "intelligently".
  var startTime: PbTime {
    get {return _startTime ?? PbTime()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: PbTime? = nil
}

struct Data_PbAutomaticMeasurementSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: Data_PbAutomaticMeasurementSettings.PbAutomaticMeasurementState {
    get {return _state ?? .off}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  /// This field is used to provide settings for measurements when state is TIMED.
  var timedSettings: Data_PbTimedMeasurementSettings {
    get {return _timedSettings ?? Data_PbTimedMeasurementSettings()}
    set {_timedSettings = newValue}
  }
  /// Returns true if `timedSettings` has been explicitly set.
  var hasTimedSettings: Bool {return self._timedSettings != nil}
  /// Clears the value of `timedSettings`. Subsequent reads from it will return its default value.
  mutating func clearTimedSettings() {self._timedSettings = nil}

  /// This field is used to provide settings for measurements when state is INTELLIGENT_TIMED.
  var intelligentTimedSettings: Data_PbIntelligentTimedMeasurementSettings {
    get {return _intelligentTimedSettings ?? Data_PbIntelligentTimedMeasurementSettings()}
    set {_intelligentTimedSettings = newValue}
  }
  /// Returns true if `intelligentTimedSettings` has been explicitly set.
  var hasIntelligentTimedSettings: Bool {return self._intelligentTimedSettings != nil}
  /// Clears the value of `intelligentTimedSettings`. Subsequent reads from it will return its default value.
  mutating func clearIntelligentTimedSettings() {self._intelligentTimedSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbAutomaticMeasurementState: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case off // = 0
    case alwaysOn // = 1
    case intelligentTimed // = 2
    case timed // = 3

    init() {
      self = .off
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .off
      case 1: self = .alwaysOn
      case 2: self = .intelligentTimed
      case 3: self = .timed
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .off: return 0
      case .alwaysOn: return 1
      case .intelligentTimed: return 2
      case .timed: return 3
      }
    }

  }

  init() {}

  fileprivate var _state: Data_PbAutomaticMeasurementSettings.PbAutomaticMeasurementState? = nil
  fileprivate var _timedSettings: Data_PbTimedMeasurementSettings? = nil
  fileprivate var _intelligentTimedSettings: Data_PbIntelligentTimedMeasurementSettings? = nil
}

struct Data_PbUserAutomaticMeasurementSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var automaticOhrMeasurement: Data_PbAutomaticMeasurementSettings {
    get {return _automaticOhrMeasurement ?? Data_PbAutomaticMeasurementSettings()}
    set {_automaticOhrMeasurement = newValue}
  }
  /// Returns true if `automaticOhrMeasurement` has been explicitly set.
  var hasAutomaticOhrMeasurement: Bool {return self._automaticOhrMeasurement != nil}
  /// Clears the value of `automaticOhrMeasurement`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticOhrMeasurement() {self._automaticOhrMeasurement = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _automaticOhrMeasurement: Data_PbAutomaticMeasurementSettings? = nil
}

struct Data_PbUserDeviceStravaSegmentsSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enabled: Bool {
    get {return _enabled ?? false}
    set {_enabled = newValue}
  }
  /// Returns true if `enabled` has been explicitly set.
  var hasEnabled: Bool {return self._enabled != nil}
  /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
  mutating func clearEnabled() {self._enabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enabled: Bool? = nil
}

struct Data_PbUserDeviceDaylightSaving: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nextDaylightSavingTime: PbSystemDateTime {
    get {return _nextDaylightSavingTime ?? PbSystemDateTime()}
    set {_nextDaylightSavingTime = newValue}
  }
  /// Returns true if `nextDaylightSavingTime` has been explicitly set.
  var hasNextDaylightSavingTime: Bool {return self._nextDaylightSavingTime != nil}
  /// Clears the value of `nextDaylightSavingTime`. Subsequent reads from it will return its default value.
  mutating func clearNextDaylightSavingTime() {self._nextDaylightSavingTime = nil}

  /// Seconds. Can be negative or positive.
  var offset: Int32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nextDaylightSavingTime: PbSystemDateTime? = nil
  fileprivate var _offset: Int32? = nil
}

struct Data_PbUserDeviceRecoveryProSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recoveryProEnabled: Bool {
    get {return _recoveryProEnabled ?? false}
    set {_recoveryProEnabled = newValue}
  }
  /// Returns true if `recoveryProEnabled` has been explicitly set.
  var hasRecoveryProEnabled: Bool {return self._recoveryProEnabled != nil}
  /// Clears the value of `recoveryProEnabled`. Subsequent reads from it will return its default value.
  mutating func clearRecoveryProEnabled() {self._recoveryProEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recoveryProEnabled: Bool? = nil
}

struct Data_PbSatelliteSystemSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gpsEnabled: Bool {
    get {return _gpsEnabled ?? false}
    set {_gpsEnabled = newValue}
  }
  /// Returns true if `gpsEnabled` has been explicitly set.
  var hasGpsEnabled: Bool {return self._gpsEnabled != nil}
  /// Clears the value of `gpsEnabled`. Subsequent reads from it will return its default value.
  mutating func clearGpsEnabled() {self._gpsEnabled = nil}

  var glonassEnabled: Bool {
    get {return _glonassEnabled ?? false}
    set {_glonassEnabled = newValue}
  }
  /// Returns true if `glonassEnabled` has been explicitly set.
  var hasGlonassEnabled: Bool {return self._glonassEnabled != nil}
  /// Clears the value of `glonassEnabled`. Subsequent reads from it will return its default value.
  mutating func clearGlonassEnabled() {self._glonassEnabled = nil}

  var galileoEnabled: Bool {
    get {return _galileoEnabled ?? false}
    set {_galileoEnabled = newValue}
  }
  /// Returns true if `galileoEnabled` has been explicitly set.
  var hasGalileoEnabled: Bool {return self._galileoEnabled != nil}
  /// Clears the value of `galileoEnabled`. Subsequent reads from it will return its default value.
  mutating func clearGalileoEnabled() {self._galileoEnabled = nil}

  var sbasEnabled: Bool {
    get {return _sbasEnabled ?? false}
    set {_sbasEnabled = newValue}
  }
  /// Returns true if `sbasEnabled` has been explicitly set.
  var hasSbasEnabled: Bool {return self._sbasEnabled != nil}
  /// Clears the value of `sbasEnabled`. Subsequent reads from it will return its default value.
  mutating func clearSbasEnabled() {self._sbasEnabled = nil}

  var beidouEnabled: Bool {
    get {return _beidouEnabled ?? false}
    set {_beidouEnabled = newValue}
  }
  /// Returns true if `beidouEnabled` has been explicitly set.
  var hasBeidouEnabled: Bool {return self._beidouEnabled != nil}
  /// Clears the value of `beidouEnabled`. Subsequent reads from it will return its default value.
  mutating func clearBeidouEnabled() {self._beidouEnabled = nil}

  var qzssEnabled: Bool {
    get {return _qzssEnabled ?? false}
    set {_qzssEnabled = newValue}
  }
  /// Returns true if `qzssEnabled` has been explicitly set.
  var hasQzssEnabled: Bool {return self._qzssEnabled != nil}
  /// Clears the value of `qzssEnabled`. Subsequent reads from it will return its default value.
  mutating func clearQzssEnabled() {self._qzssEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gpsEnabled: Bool? = nil
  fileprivate var _glonassEnabled: Bool? = nil
  fileprivate var _galileoEnabled: Bool? = nil
  fileprivate var _sbasEnabled: Bool? = nil
  fileprivate var _beidouEnabled: Bool? = nil
  fileprivate var _qzssEnabled: Bool? = nil
}

struct Data_PbGnssSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var satelliteSystemSettings: Data_PbSatelliteSystemSettings {
    get {return _satelliteSystemSettings ?? Data_PbSatelliteSystemSettings()}
    set {_satelliteSystemSettings = newValue}
  }
  /// Returns true if `satelliteSystemSettings` has been explicitly set.
  var hasSatelliteSystemSettings: Bool {return self._satelliteSystemSettings != nil}
  /// Clears the value of `satelliteSystemSettings`. Subsequent reads from it will return its default value.
  mutating func clearSatelliteSystemSettings() {self._satelliteSystemSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _satelliteSystemSettings: Data_PbSatelliteSystemSettings? = nil
}

struct Data_PbBreathingExerciseSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Breathing exercise target duration
  var duration: PbDuration {
    get {return _duration ?? PbDuration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  /// Target inhale duration in milliseconds
  var targetInhaleDuration: UInt32 {
    get {return _targetInhaleDuration ?? 0}
    set {_targetInhaleDuration = newValue}
  }
  /// Returns true if `targetInhaleDuration` has been explicitly set.
  var hasTargetInhaleDuration: Bool {return self._targetInhaleDuration != nil}
  /// Clears the value of `targetInhaleDuration`. Subsequent reads from it will return its default value.
  mutating func clearTargetInhaleDuration() {self._targetInhaleDuration = nil}

  /// Target exhale duration in milliseconds
  var targetExhaleDuration: UInt32 {
    get {return _targetExhaleDuration ?? 0}
    set {_targetExhaleDuration = newValue}
  }
  /// Returns true if `targetExhaleDuration` has been explicitly set.
  var hasTargetExhaleDuration: Bool {return self._targetExhaleDuration != nil}
  /// Clears the value of `targetExhaleDuration`. Subsequent reads from it will return its default value.
  mutating func clearTargetExhaleDuration() {self._targetExhaleDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _duration: PbDuration? = nil
  fileprivate var _targetInhaleDuration: UInt32? = nil
  fileprivate var _targetExhaleDuration: UInt32? = nil
}

struct Data_PbRunningTestSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Running test initial speed in km/h, default is 6 km/h
  var initialSpeed: Float {
    get {return _initialSpeed ?? 0}
    set {_initialSpeed = newValue}
  }
  /// Returns true if `initialSpeed` has been explicitly set.
  var hasInitialSpeed: Bool {return self._initialSpeed != nil}
  /// Clears the value of `initialSpeed`. Subsequent reads from it will return its default value.
  mutating func clearInitialSpeed() {self._initialSpeed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _initialSpeed: Float? = nil
}

struct Data_PbMediaControlSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mode: Data_PbMediaControlSettings.PbMediaControlMode {
    get {return _mode ?? .alwaysOff}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbMediaControlMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case alwaysOff // = 0
    case alwaysOn // = 1
    case onWhenTraining // = 2
    case onWhenNotTraining // = 3

    init() {
      self = .alwaysOff
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alwaysOff
      case 1: self = .alwaysOn
      case 2: self = .onWhenTraining
      case 3: self = .onWhenNotTraining
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .alwaysOff: return 0
      case .alwaysOn: return 1
      case .onWhenTraining: return 2
      case .onWhenNotTraining: return 3
      }
    }

  }

  init() {}

  fileprivate var _mode: Data_PbMediaControlSettings.PbMediaControlMode? = nil
}

struct Data_PbUserDeviceTelemetrySettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var telemetryEnabled: Bool {
    get {return _telemetryEnabled ?? false}
    set {_telemetryEnabled = newValue}
  }
  /// Returns true if `telemetryEnabled` has been explicitly set.
  var hasTelemetryEnabled: Bool {return self._telemetryEnabled != nil}
  /// Clears the value of `telemetryEnabled`. Subsequent reads from it will return its default value.
  mutating func clearTelemetryEnabled() {self._telemetryEnabled = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _telemetryEnabled: Bool? = nil
}

struct Data_PbUsbConnectionSettings: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mode: Data_PbUsbConnectionSettings.PbUsbConnectionMode {
    get {return _mode ?? .unknown}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PbUsbConnectionMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int
    case unknown // = 0
    case off // = 1
    case on // = 2

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .off
      case 2: self = .on
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .off: return 1
      case .on: return 2
      }
    }

  }

  init() {}

  fileprivate var _mode: Data_PbUsbConnectionSettings.PbUsbConnectionMode? = nil
}

struct Data_PbUserDeviceSettings: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var generalSettings: Data_PbUserDeviceGeneralSettings {
    get {return _storage._generalSettings ?? Data_PbUserDeviceGeneralSettings()}
    set {_uniqueStorage()._generalSettings = newValue}
  }
  /// Returns true if `generalSettings` has been explicitly set.
  var hasGeneralSettings: Bool {return _storage._generalSettings != nil}
  /// Clears the value of `generalSettings`. Subsequent reads from it will return its default value.
  mutating func clearGeneralSettings() {_uniqueStorage()._generalSettings = nil}

  var alarmSettings: Data_PbUserDeviceAlarmSettings {
    get {return _storage._alarmSettings ?? Data_PbUserDeviceAlarmSettings()}
    set {_uniqueStorage()._alarmSettings = newValue}
  }
  /// Returns true if `alarmSettings` has been explicitly set.
  var hasAlarmSettings: Bool {return _storage._alarmSettings != nil}
  /// Clears the value of `alarmSettings`. Subsequent reads from it will return its default value.
  mutating func clearAlarmSettings() {_uniqueStorage()._alarmSettings = nil}

  var countdownSettings: Data_PbUserDeviceCountdownSettings {
    get {return _storage._countdownSettings ?? Data_PbUserDeviceCountdownSettings()}
    set {_uniqueStorage()._countdownSettings = newValue}
  }
  /// Returns true if `countdownSettings` has been explicitly set.
  var hasCountdownSettings: Bool {return _storage._countdownSettings != nil}
  /// Clears the value of `countdownSettings`. Subsequent reads from it will return its default value.
  mutating func clearCountdownSettings() {_uniqueStorage()._countdownSettings = nil}

  var jumptestSettings: Data_PbUserDeviceJumpTestSettings {
    get {return _storage._jumptestSettings ?? Data_PbUserDeviceJumpTestSettings()}
    set {_uniqueStorage()._jumptestSettings = newValue}
  }
  /// Returns true if `jumptestSettings` has been explicitly set.
  var hasJumptestSettings: Bool {return _storage._jumptestSettings != nil}
  /// Clears the value of `jumptestSettings`. Subsequent reads from it will return its default value.
  mutating func clearJumptestSettings() {_uniqueStorage()._jumptestSettings = nil}

  var intervalTimerSettings: Data_PbUserIntervalTimerSettings {
    get {return _storage._intervalTimerSettings ?? Data_PbUserIntervalTimerSettings()}
    set {_uniqueStorage()._intervalTimerSettings = newValue}
  }
  /// Returns true if `intervalTimerSettings` has been explicitly set.
  var hasIntervalTimerSettings: Bool {return _storage._intervalTimerSettings != nil}
  /// Clears the value of `intervalTimerSettings`. Subsequent reads from it will return its default value.
  mutating func clearIntervalTimerSettings() {_uniqueStorage()._intervalTimerSettings = nil}

  var endTimeEstimatorSettings: Data_PbUserEndTimeEstimatorSettings {
    get {return _storage._endTimeEstimatorSettings ?? Data_PbUserEndTimeEstimatorSettings()}
    set {_uniqueStorage()._endTimeEstimatorSettings = newValue}
  }
  /// Returns true if `endTimeEstimatorSettings` has been explicitly set.
  var hasEndTimeEstimatorSettings: Bool {return _storage._endTimeEstimatorSettings != nil}
  /// Clears the value of `endTimeEstimatorSettings`. Subsequent reads from it will return its default value.
  mutating func clearEndTimeEstimatorSettings() {_uniqueStorage()._endTimeEstimatorSettings = nil}

  var researchSettings: Data_PbUserDeviceResearchSettings {
    get {return _storage._researchSettings ?? Data_PbUserDeviceResearchSettings()}
    set {_uniqueStorage()._researchSettings = newValue}
  }
  /// Returns true if `researchSettings` has been explicitly set.
  var hasResearchSettings: Bool {return _storage._researchSettings != nil}
  /// Clears the value of `researchSettings`. Subsequent reads from it will return its default value.
  mutating func clearResearchSettings() {_uniqueStorage()._researchSettings = nil}

  var safetyLightSettings: Data_PbUserSafetyLightSettings {
    get {return _storage._safetyLightSettings ?? Data_PbUserSafetyLightSettings()}
    set {_uniqueStorage()._safetyLightSettings = newValue}
  }
  /// Returns true if `safetyLightSettings` has been explicitly set.
  var hasSafetyLightSettings: Bool {return _storage._safetyLightSettings != nil}
  /// Clears the value of `safetyLightSettings`. Subsequent reads from it will return its default value.
  mutating func clearSafetyLightSettings() {_uniqueStorage()._safetyLightSettings = nil}

  var smartWatchNotificationSettings: Data_PbUserSmartWatchNotificationSettings {
    get {return _storage._smartWatchNotificationSettings ?? Data_PbUserSmartWatchNotificationSettings()}
    set {_uniqueStorage()._smartWatchNotificationSettings = newValue}
  }
  /// Returns true if `smartWatchNotificationSettings` has been explicitly set.
  var hasSmartWatchNotificationSettings: Bool {return _storage._smartWatchNotificationSettings != nil}
  /// Clears the value of `smartWatchNotificationSettings`. Subsequent reads from it will return its default value.
  mutating func clearSmartWatchNotificationSettings() {_uniqueStorage()._smartWatchNotificationSettings = nil}

  var mapSettings: Data_PbUserMapSettings {
    get {return _storage._mapSettings ?? Data_PbUserMapSettings()}
    set {_uniqueStorage()._mapSettings = newValue}
  }
  /// Returns true if `mapSettings` has been explicitly set.
  var hasMapSettings: Bool {return _storage._mapSettings != nil}
  /// Clears the value of `mapSettings`. Subsequent reads from it will return its default value.
  mutating func clearMapSettings() {_uniqueStorage()._mapSettings = nil}

  var rinseDryMessageSettings: Data_PbUserDeviceRinseDryMessageSettings {
    get {return _storage._rinseDryMessageSettings ?? Data_PbUserDeviceRinseDryMessageSettings()}
    set {_uniqueStorage()._rinseDryMessageSettings = newValue}
  }
  /// Returns true if `rinseDryMessageSettings` has been explicitly set.
  var hasRinseDryMessageSettings: Bool {return _storage._rinseDryMessageSettings != nil}
  /// Clears the value of `rinseDryMessageSettings`. Subsequent reads from it will return its default value.
  mutating func clearRinseDryMessageSettings() {_uniqueStorage()._rinseDryMessageSettings = nil}

  var massStorageSettings: Data_PbUserDeviceMassStorageSettings {
    get {return _storage._massStorageSettings ?? Data_PbUserDeviceMassStorageSettings()}
    set {_uniqueStorage()._massStorageSettings = newValue}
  }
  /// Returns true if `massStorageSettings` has been explicitly set.
  var hasMassStorageSettings: Bool {return _storage._massStorageSettings != nil}
  /// Clears the value of `massStorageSettings`. Subsequent reads from it will return its default value.
  mutating func clearMassStorageSettings() {_uniqueStorage()._massStorageSettings = nil}

  var doNotDisturbSettings: Data_PbUserDeviceDoNotDisturbSettings {
    get {return _storage._doNotDisturbSettings ?? Data_PbUserDeviceDoNotDisturbSettings()}
    set {_uniqueStorage()._doNotDisturbSettings = newValue}
  }
  /// Returns true if `doNotDisturbSettings` has been explicitly set.
  var hasDoNotDisturbSettings: Bool {return _storage._doNotDisturbSettings != nil}
  /// Clears the value of `doNotDisturbSettings`. Subsequent reads from it will return its default value.
  mutating func clearDoNotDisturbSettings() {_uniqueStorage()._doNotDisturbSettings = nil}

  var autoSyncSettings: Data_PbUserDeviceAutoSyncSettings {
    get {return _storage._autoSyncSettings ?? Data_PbUserDeviceAutoSyncSettings()}
    set {_uniqueStorage()._autoSyncSettings = newValue}
  }
  /// Returns true if `autoSyncSettings` has been explicitly set.
  var hasAutoSyncSettings: Bool {return _storage._autoSyncSettings != nil}
  /// Clears the value of `autoSyncSettings`. Subsequent reads from it will return its default value.
  mutating func clearAutoSyncSettings() {_uniqueStorage()._autoSyncSettings = nil}

  var automaticSampleSettings: Data_PbUserDeviceAutomaticSampleSettings {
    get {return _storage._automaticSampleSettings ?? Data_PbUserDeviceAutomaticSampleSettings()}
    set {_uniqueStorage()._automaticSampleSettings = newValue}
  }
  /// Returns true if `automaticSampleSettings` has been explicitly set.
  var hasAutomaticSampleSettings: Bool {return _storage._automaticSampleSettings != nil}
  /// Clears the value of `automaticSampleSettings`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticSampleSettings() {_uniqueStorage()._automaticSampleSettings = nil}

  var stravaSegmentsSettings: Data_PbUserDeviceStravaSegmentsSettings {
    get {return _storage._stravaSegmentsSettings ?? Data_PbUserDeviceStravaSegmentsSettings()}
    set {_uniqueStorage()._stravaSegmentsSettings = newValue}
  }
  /// Returns true if `stravaSegmentsSettings` has been explicitly set.
  var hasStravaSegmentsSettings: Bool {return _storage._stravaSegmentsSettings != nil}
  /// Clears the value of `stravaSegmentsSettings`. Subsequent reads from it will return its default value.
  mutating func clearStravaSegmentsSettings() {_uniqueStorage()._stravaSegmentsSettings = nil}

  var daylightSaving: Data_PbUserDeviceDaylightSaving {
    get {return _storage._daylightSaving ?? Data_PbUserDeviceDaylightSaving()}
    set {_uniqueStorage()._daylightSaving = newValue}
  }
  /// Returns true if `daylightSaving` has been explicitly set.
  var hasDaylightSaving: Bool {return _storage._daylightSaving != nil}
  /// Clears the value of `daylightSaving`. Subsequent reads from it will return its default value.
  mutating func clearDaylightSaving() {_uniqueStorage()._daylightSaving = nil}

  var recoveryProSettings: Data_PbUserDeviceRecoveryProSettings {
    get {return _storage._recoveryProSettings ?? Data_PbUserDeviceRecoveryProSettings()}
    set {_uniqueStorage()._recoveryProSettings = newValue}
  }
  /// Returns true if `recoveryProSettings` has been explicitly set.
  var hasRecoveryProSettings: Bool {return _storage._recoveryProSettings != nil}
  /// Clears the value of `recoveryProSettings`. Subsequent reads from it will return its default value.
  mutating func clearRecoveryProSettings() {_uniqueStorage()._recoveryProSettings = nil}

  var orthostaticTestSchedule: Data_PbOrthostaticTestSchedule {
    get {return _storage._orthostaticTestSchedule ?? Data_PbOrthostaticTestSchedule()}
    set {_uniqueStorage()._orthostaticTestSchedule = newValue}
  }
  /// Returns true if `orthostaticTestSchedule` has been explicitly set.
  var hasOrthostaticTestSchedule: Bool {return _storage._orthostaticTestSchedule != nil}
  /// Clears the value of `orthostaticTestSchedule`. Subsequent reads from it will return its default value.
  mutating func clearOrthostaticTestSchedule() {_uniqueStorage()._orthostaticTestSchedule = nil}

  /// "do_not_disturb_settings_v2" field excludes the "do_not_distrub_settings" field when set
  var doNotDisturbSettingsV2: Data_PbUserDeviceDoNotDisturbSettings_v2 {
    get {return _storage._doNotDisturbSettingsV2 ?? Data_PbUserDeviceDoNotDisturbSettings_v2()}
    set {_uniqueStorage()._doNotDisturbSettingsV2 = newValue}
  }
  /// Returns true if `doNotDisturbSettingsV2` has been explicitly set.
  var hasDoNotDisturbSettingsV2: Bool {return _storage._doNotDisturbSettingsV2 != nil}
  /// Clears the value of `doNotDisturbSettingsV2`. Subsequent reads from it will return its default value.
  mutating func clearDoNotDisturbSettingsV2() {_uniqueStorage()._doNotDisturbSettingsV2 = nil}

  /// "automatic_measurement_settings" field excludes the "automatic_sample_settings" field when set
  var automaticMeasurementSettings: Data_PbUserAutomaticMeasurementSettings {
    get {return _storage._automaticMeasurementSettings ?? Data_PbUserAutomaticMeasurementSettings()}
    set {_uniqueStorage()._automaticMeasurementSettings = newValue}
  }
  /// Returns true if `automaticMeasurementSettings` has been explicitly set.
  var hasAutomaticMeasurementSettings: Bool {return _storage._automaticMeasurementSettings != nil}
  /// Clears the value of `automaticMeasurementSettings`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticMeasurementSettings() {_uniqueStorage()._automaticMeasurementSettings = nil}

  var gnssSettings: Data_PbGnssSettings {
    get {return _storage._gnssSettings ?? Data_PbGnssSettings()}
    set {_uniqueStorage()._gnssSettings = newValue}
  }
  /// Returns true if `gnssSettings` has been explicitly set.
  var hasGnssSettings: Bool {return _storage._gnssSettings != nil}
  /// Clears the value of `gnssSettings`. Subsequent reads from it will return its default value.
  mutating func clearGnssSettings() {_uniqueStorage()._gnssSettings = nil}

  var breathingExerciseSettings: Data_PbBreathingExerciseSettings {
    get {return _storage._breathingExerciseSettings ?? Data_PbBreathingExerciseSettings()}
    set {_uniqueStorage()._breathingExerciseSettings = newValue}
  }
  /// Returns true if `breathingExerciseSettings` has been explicitly set.
  var hasBreathingExerciseSettings: Bool {return _storage._breathingExerciseSettings != nil}
  /// Clears the value of `breathingExerciseSettings`. Subsequent reads from it will return its default value.
  mutating func clearBreathingExerciseSettings() {_uniqueStorage()._breathingExerciseSettings = nil}

  var runningTestSettings: Data_PbRunningTestSettings {
    get {return _storage._runningTestSettings ?? Data_PbRunningTestSettings()}
    set {_uniqueStorage()._runningTestSettings = newValue}
  }
  /// Returns true if `runningTestSettings` has been explicitly set.
  var hasRunningTestSettings: Bool {return _storage._runningTestSettings != nil}
  /// Clears the value of `runningTestSettings`. Subsequent reads from it will return its default value.
  mutating func clearRunningTestSettings() {_uniqueStorage()._runningTestSettings = nil}

  var mediaControlSettings: Data_PbMediaControlSettings {
    get {return _storage._mediaControlSettings ?? Data_PbMediaControlSettings()}
    set {_uniqueStorage()._mediaControlSettings = newValue}
  }
  /// Returns true if `mediaControlSettings` has been explicitly set.
  var hasMediaControlSettings: Bool {return _storage._mediaControlSettings != nil}
  /// Clears the value of `mediaControlSettings`. Subsequent reads from it will return its default value.
  mutating func clearMediaControlSettings() {_uniqueStorage()._mediaControlSettings = nil}

  var telemetrySettings: Data_PbUserDeviceTelemetrySettings {
    get {return _storage._telemetrySettings ?? Data_PbUserDeviceTelemetrySettings()}
    set {_uniqueStorage()._telemetrySettings = newValue}
  }
  /// Returns true if `telemetrySettings` has been explicitly set.
  var hasTelemetrySettings: Bool {return _storage._telemetrySettings != nil}
  /// Clears the value of `telemetrySettings`. Subsequent reads from it will return its default value.
  mutating func clearTelemetrySettings() {_uniqueStorage()._telemetrySettings = nil}

  var usbConnectionSettings: Data_PbUsbConnectionSettings {
    get {return _storage._usbConnectionSettings ?? Data_PbUsbConnectionSettings()}
    set {_uniqueStorage()._usbConnectionSettings = newValue}
  }
  /// Returns true if `usbConnectionSettings` has been explicitly set.
  var hasUsbConnectionSettings: Bool {return _storage._usbConnectionSettings != nil}
  /// Clears the value of `usbConnectionSettings`. Subsequent reads from it will return its default value.
  mutating func clearUsbConnectionSettings() {_uniqueStorage()._usbConnectionSettings = nil}

  var lastModified: PbSystemDateTime {
    get {return _storage._lastModified ?? PbSystemDateTime()}
    set {_uniqueStorage()._lastModified = newValue}
  }
  /// Returns true if `lastModified` has been explicitly set.
  var hasLastModified: Bool {return _storage._lastModified != nil}
  /// Clears the value of `lastModified`. Subsequent reads from it will return its default value.
  mutating func clearLastModified() {_uniqueStorage()._lastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbUserDashboardSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDashboardSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dashboard"),
    2: .standard(proto: "available_dashboards"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dashboard) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.availableDashboards) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dashboard {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.availableDashboards.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.availableDashboards, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDashboardSettings, rhs: Data_PbUserDashboardSettings) -> Bool {
    if lhs._dashboard != rhs._dashboard {return false}
    if lhs.availableDashboards != rhs.availableDashboards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDashboardSettings.PbDashboard: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BASIC"),
    2: .same(proto: "ACTIVITY"),
    3: .same(proto: "TRAINING_LOAD"),
    4: .same(proto: "HEART_RATE"),
    5: .same(proto: "SLEEP"),
    6: .same(proto: "LAST_TRAINING"),
    7: .same(proto: "ON_DEMAND_TRAINING"),
    8: .same(proto: "WEATHER"),
    9: .same(proto: "WEEKLY_SUMMARY"),
  ]
}

extension Data_PbUserDeviceGeneralSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceGeneralSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "OBSOLETE_time_selection"),
    2: .standard(proto: "OBSOLETE_time2_offset"),
    3: .standard(proto: "watch_face"),
    4: .standard(proto: "button_lock_mode"),
    5: .standard(proto: "button_sound_volume"),
    7: .standard(proto: "vibration_mode"),
    8: .standard(proto: "OBSOLETE_handedness"),
    9: .standard(proto: "exeview_inverted"),
    10: .standard(proto: "tap_button_sensitivity"),
    11: .standard(proto: "inactivity_alert"),
    12: .standard(proto: "ble_connect_mode_enable"),
    13: .standard(proto: "backup_watch_face"),
    14: .same(proto: "flightmode"),
    15: .standard(proto: "device_location"),
    16: .standard(proto: "watch_face_color"),
    17: .standard(proto: "dashboard_settings"),
    18: .standard(proto: "vibration_feedback_mode"),
  ]

  fileprivate class _StorageClass {
    var _obsoleteTimeSelection: PbTimeSelection? = nil
    var _obsoleteTime2Offset: Int32? = nil
    var _watchFace: Data_PbUserDeviceGeneralSettings.PbWatchFace? = nil
    var _buttonLockMode: Data_PbUserDeviceGeneralSettings.PbButtonLockMode? = nil
    var _buttonSoundVolume: PbVolume? = nil
    var _vibrationMode: Bool? = nil
    var _obsoleteHandedness: PbHandedness? = nil
    var _exeviewInverted: Bool? = nil
    var _tapButtonSensitivity: Data_PbUserDeviceGeneralSettings.PbTapButtonSensitivity? = nil
    var _inactivityAlert: Data_PbUserDeviceGeneralSettings.PbInactivityAlert? = nil
    var _bleConnectModeEnable: Bool? = nil
    var _backupWatchFace: Data_PbUserDeviceGeneralSettings.PbWatchFace? = nil
    var _flightmode: Data_PbUserDeviceGeneralSettings.PbFlightMode? = nil
    var _deviceLocation: PbDeviceLocation? = nil
    var _watchFaceColor: UInt32? = nil
    var _dashboardSettings: Data_PbUserDashboardSettings? = nil
    var _vibrationFeedbackMode: Data_PbUserDeviceGeneralSettings.PbVibrationFeedbackMode? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _obsoleteTimeSelection = source._obsoleteTimeSelection
      _obsoleteTime2Offset = source._obsoleteTime2Offset
      _watchFace = source._watchFace
      _buttonLockMode = source._buttonLockMode
      _buttonSoundVolume = source._buttonSoundVolume
      _vibrationMode = source._vibrationMode
      _obsoleteHandedness = source._obsoleteHandedness
      _exeviewInverted = source._exeviewInverted
      _tapButtonSensitivity = source._tapButtonSensitivity
      _inactivityAlert = source._inactivityAlert
      _bleConnectModeEnable = source._bleConnectModeEnable
      _backupWatchFace = source._backupWatchFace
      _flightmode = source._flightmode
      _deviceLocation = source._deviceLocation
      _watchFaceColor = source._watchFaceColor
      _dashboardSettings = source._dashboardSettings
      _vibrationFeedbackMode = source._vibrationFeedbackMode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._buttonSoundVolume, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._obsoleteTimeSelection) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._obsoleteTime2Offset) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._watchFace) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._buttonLockMode) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._buttonSoundVolume) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._vibrationMode) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._obsoleteHandedness) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._exeviewInverted) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._tapButtonSensitivity) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._inactivityAlert) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._bleConnectModeEnable) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._backupWatchFace) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._flightmode) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._deviceLocation) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._watchFaceColor) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._dashboardSettings) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._vibrationFeedbackMode) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._obsoleteTimeSelection {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._obsoleteTime2Offset {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._watchFace {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._buttonLockMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._buttonSoundVolume {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._vibrationMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._obsoleteHandedness {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._exeviewInverted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._tapButtonSensitivity {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._inactivityAlert {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._bleConnectModeEnable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._backupWatchFace {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._flightmode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._deviceLocation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._watchFaceColor {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._dashboardSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._vibrationFeedbackMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceGeneralSettings, rhs: Data_PbUserDeviceGeneralSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._obsoleteTimeSelection != rhs_storage._obsoleteTimeSelection {return false}
        if _storage._obsoleteTime2Offset != rhs_storage._obsoleteTime2Offset {return false}
        if _storage._watchFace != rhs_storage._watchFace {return false}
        if _storage._buttonLockMode != rhs_storage._buttonLockMode {return false}
        if _storage._buttonSoundVolume != rhs_storage._buttonSoundVolume {return false}
        if _storage._vibrationMode != rhs_storage._vibrationMode {return false}
        if _storage._obsoleteHandedness != rhs_storage._obsoleteHandedness {return false}
        if _storage._exeviewInverted != rhs_storage._exeviewInverted {return false}
        if _storage._tapButtonSensitivity != rhs_storage._tapButtonSensitivity {return false}
        if _storage._inactivityAlert != rhs_storage._inactivityAlert {return false}
        if _storage._bleConnectModeEnable != rhs_storage._bleConnectModeEnable {return false}
        if _storage._backupWatchFace != rhs_storage._backupWatchFace {return false}
        if _storage._flightmode != rhs_storage._flightmode {return false}
        if _storage._deviceLocation != rhs_storage._deviceLocation {return false}
        if _storage._watchFaceColor != rhs_storage._watchFaceColor {return false}
        if _storage._dashboardSettings != rhs_storage._dashboardSettings {return false}
        if _storage._vibrationFeedbackMode != rhs_storage._vibrationFeedbackMode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceGeneralSettings.PbWatchFace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BASIC"),
    2: .same(proto: "AWARD"),
    3: .same(proto: "USER_NAME"),
    4: .same(proto: "EVENT"),
    5: .same(proto: "ANALOG"),
    6: .same(proto: "BIG"),
    7: .same(proto: "ACTIVITY"),
    8: .same(proto: "BIG_ANALOG"),
    9: .same(proto: "WHITE_ANALOG"),
    10: .same(proto: "JUMBO"),
    11: .same(proto: "BIG_DIGITS"),
    12: .same(proto: "ACTIVITY_CIRCLE"),
  ]
}

extension Data_PbUserDeviceGeneralSettings.PbButtonLockMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MANUAL"),
    2: .same(proto: "AUTO"),
  ]
}

extension Data_PbUserDeviceGeneralSettings.PbTapButtonSensitivity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TAP_BUTTON_SENSITIVITY_OFF"),
    2: .same(proto: "TAP_BUTTON_SENSITIVITY_LOW"),
    3: .same(proto: "TAP_BUTTON_SENSITIVITY_MEDIUM"),
    4: .same(proto: "TAP_BUTTON_SENSITIVITY_HIGH"),
    5: .same(proto: "TAP_BUTTON_SENSITIVITY_VERY_LOW"),
  ]
}

extension Data_PbUserDeviceGeneralSettings.PbInactivityAlert: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "INACTIVITY_ALERT_OFF"),
    2: .same(proto: "INACTIVITY_ALERT_ON"),
  ]
}

extension Data_PbUserDeviceGeneralSettings.PbFlightMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FLIGHTMODE_OFF"),
    2: .same(proto: "FLIGHTMODE_ON"),
  ]
}

extension Data_PbUserDeviceGeneralSettings.PbVibrationFeedbackMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIBRATION_FEEDBACK_DISABLED"),
    2: .same(proto: "VIBRATION_FEEDBACK_ENABLED"),
  ]
}

extension Data_PbUserDeviceAlarmSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceAlarmSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "alarm_mode"),
    2: .standard(proto: "alarm_time"),
  ]

  public var isInitialized: Bool {
    if self._alarmMode == nil {return false}
    if self._alarmTime == nil {return false}
    if let v = self._alarmTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._alarmMode) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._alarmTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._alarmMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._alarmTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceAlarmSettings, rhs: Data_PbUserDeviceAlarmSettings) -> Bool {
    if lhs._alarmMode != rhs._alarmMode {return false}
    if lhs._alarmTime != rhs._alarmTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceAlarmSettings.PbAlarmMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ALARM_MODE_OFF"),
    2: .same(proto: "ALARM_MODE_ONCE"),
    3: .same(proto: "ALARM_MODE_MON_TO_FRI"),
    4: .same(proto: "ALARM_MODE_EVERY_DAY"),
  ]
}

extension Data_PbOrthostaticTestSchedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbOrthostaticTestSchedule"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "monday_scheduled"),
    2: .standard(proto: "tuesday_scheduled"),
    3: .standard(proto: "wednesday_scheduled"),
    4: .standard(proto: "thursday_scheduled"),
    5: .standard(proto: "friday_scheduled"),
    6: .standard(proto: "saturday_scheduled"),
    7: .standard(proto: "sunday_scheduled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._mondayScheduled) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._tuesdayScheduled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._wednesdayScheduled) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._thursdayScheduled) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._fridayScheduled) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._saturdayScheduled) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._sundayScheduled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mondayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tuesdayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._wednesdayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._thursdayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._fridayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._saturdayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._sundayScheduled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbOrthostaticTestSchedule, rhs: Data_PbOrthostaticTestSchedule) -> Bool {
    if lhs._mondayScheduled != rhs._mondayScheduled {return false}
    if lhs._tuesdayScheduled != rhs._tuesdayScheduled {return false}
    if lhs._wednesdayScheduled != rhs._wednesdayScheduled {return false}
    if lhs._thursdayScheduled != rhs._thursdayScheduled {return false}
    if lhs._fridayScheduled != rhs._fridayScheduled {return false}
    if lhs._saturdayScheduled != rhs._saturdayScheduled {return false}
    if lhs._sundayScheduled != rhs._sundayScheduled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceCountdownSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceCountdownSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "countdown_time"),
  ]

  public var isInitialized: Bool {
    if self._countdownTime == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._countdownTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._countdownTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceCountdownSettings, rhs: Data_PbUserDeviceCountdownSettings) -> Bool {
    if lhs._countdownTime != rhs._countdownTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceJumpTestSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceJumpTestSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cont_jump_duration"),
  ]

  public var isInitialized: Bool {
    if self._contJumpDuration == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contJumpDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contJumpDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceJumpTestSettings, rhs: Data_PbUserDeviceJumpTestSettings) -> Bool {
    if lhs._contJumpDuration != rhs._contJumpDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbIntervalTimerValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbIntervalTimerValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interval_timer_type"),
    2: .standard(proto: "interval_timer_duration"),
    3: .standard(proto: "interval_timer_distance"),
  ]

  public var isInitialized: Bool {
    if self._intervalTimerType == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._intervalTimerType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._intervalTimerDuration) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._intervalTimerDistance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._intervalTimerType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._intervalTimerDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._intervalTimerDistance {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbIntervalTimerValue, rhs: Data_PbIntervalTimerValue) -> Bool {
    if lhs._intervalTimerType != rhs._intervalTimerType {return false}
    if lhs._intervalTimerDuration != rhs._intervalTimerDuration {return false}
    if lhs._intervalTimerDistance != rhs._intervalTimerDistance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbIntervalTimerValue.PbIntervalTimerType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "INTERVAL_TIMER_TYPE_DURATION"),
    2: .same(proto: "INTERVAL_TIMER_TYPE_DISTANCE"),
  ]
}

extension Data_PbUserIntervalTimerSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserIntervalTimerSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "interval_timer_value"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.intervalTimerValue) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.intervalTimerValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.intervalTimerValue.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.intervalTimerValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserIntervalTimerSettings, rhs: Data_PbUserIntervalTimerSettings) -> Bool {
    if lhs.intervalTimerValue != rhs.intervalTimerValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserEndTimeEstimatorSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserEndTimeEstimatorSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "end_time_estimator_target"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._endTimeEstimatorTarget) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._endTimeEstimatorTarget {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserEndTimeEstimatorSettings, rhs: Data_PbUserEndTimeEstimatorSettings) -> Bool {
    if lhs._endTimeEstimatorTarget != rhs._endTimeEstimatorTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceResearchSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceResearchSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "accelerometer_raw_data_enable"),
    2: .standard(proto: "gyroscope_raw_data_enable"),
    3: .standard(proto: "magnetometer_raw_data_enable"),
    4: .standard(proto: "linear_acceleration_data_enable"),
    5: .standard(proto: "gps_data_enable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._accelerometerRawDataEnable) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._gyroscopeRawDataEnable) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._magnetometerRawDataEnable) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._linearAccelerationDataEnable) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._gpsDataEnable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._accelerometerRawDataEnable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._gyroscopeRawDataEnable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._magnetometerRawDataEnable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._linearAccelerationDataEnable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._gpsDataEnable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceResearchSettings, rhs: Data_PbUserDeviceResearchSettings) -> Bool {
    if lhs._accelerometerRawDataEnable != rhs._accelerometerRawDataEnable {return false}
    if lhs._gyroscopeRawDataEnable != rhs._gyroscopeRawDataEnable {return false}
    if lhs._magnetometerRawDataEnable != rhs._magnetometerRawDataEnable {return false}
    if lhs._linearAccelerationDataEnable != rhs._linearAccelerationDataEnable {return false}
    if lhs._gpsDataEnable != rhs._gpsDataEnable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserSafetyLightSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserSafetyLightSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "activation_level"),
    3: .standard(proto: "blink_rate"),
  ]

  public var isInitialized: Bool {
    if self._mode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._activationLevel) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._blinkRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._activationLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._blinkRate {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserSafetyLightSettings, rhs: Data_PbUserSafetyLightSettings) -> Bool {
    if lhs._mode != rhs._mode {return false}
    if lhs._activationLevel != rhs._activationLevel {return false}
    if lhs._blinkRate != rhs._blinkRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserSafetyLightSettings.PbSafetyLightMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SAFETY_LIGHT_MANUAL"),
    2: .same(proto: "SAFETY_LIGHT_AUTOMATIC"),
  ]
}

extension Data_PbUserSafetyLightSettings.PbSafetyLightActivationLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ACTIVATION_LEVEL_DARK"),
    2: .same(proto: "ACTIVATION_LEVEL_DUSK"),
    3: .same(proto: "ACTIVATION_LEVEL_LIGHT"),
  ]
}

extension Data_PbUserSafetyLightSettings.PbSafetyLightBlinkRate: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BLINK_RATE_OFF"),
    2: .same(proto: "BLINK_RATE_SLOW"),
    3: .same(proto: "BLINK_RATE_FAST"),
    4: .same(proto: "BLINK_RATE_VERY_FAST"),
  ]
}

extension Data_PbDoNotDisturbSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbDoNotDisturbSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "start"),
    3: .same(proto: "end"),
  ]

  public var isInitialized: Bool {
    if self._enabled == nil {return false}
    if let v = self._start, !v.isInitialized {return false}
    if let v = self._end, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbDoNotDisturbSettings, rhs: Data_PbDoNotDisturbSettings) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserSmartWatchNotificationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserSmartWatchNotificationSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "preview_enabled"),
    3: .standard(proto: "do_not_disturb_settings"),
    4: .standard(proto: "sounds_enabled"),
    5: .standard(proto: "on_during_training"),
    6: .standard(proto: "on_when_not_training"),
  ]

  public var isInitialized: Bool {
    if self._enabled == nil {return false}
    if let v = self._doNotDisturbSettings, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._previewEnabled) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._doNotDisturbSettings) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._soundsEnabled) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._onDuringTraining) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._onWhenNotTraining) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._previewEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._doNotDisturbSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._soundsEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._onDuringTraining {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._onWhenNotTraining {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserSmartWatchNotificationSettings, rhs: Data_PbUserSmartWatchNotificationSettings) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs._previewEnabled != rhs._previewEnabled {return false}
    if lhs._doNotDisturbSettings != rhs._doNotDisturbSettings {return false}
    if lhs._soundsEnabled != rhs._soundsEnabled {return false}
    if lhs._onDuringTraining != rhs._onDuringTraining {return false}
    if lhs._onWhenNotTraining != rhs._onWhenNotTraining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserMapSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserMapSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "map_top_direction"),
    2: .standard(proto: "altitude_data_enabled"),
    3: .standard(proto: "bike_route_data_enabled"),
  ]

  public var isInitialized: Bool {
    if self._mapTopDirection == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._mapTopDirection) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._altitudeDataEnabled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._bikeRouteDataEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mapTopDirection {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._altitudeDataEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bikeRouteDataEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserMapSettings, rhs: Data_PbUserMapSettings) -> Bool {
    if lhs._mapTopDirection != rhs._mapTopDirection {return false}
    if lhs._altitudeDataEnabled != rhs._altitudeDataEnabled {return false}
    if lhs._bikeRouteDataEnabled != rhs._bikeRouteDataEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserMapSettings.PbMapTopDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TOP_DIRECTION_NORTH"),
    2: .same(proto: "TOP_DIRECTION_HEADING"),
  ]
}

extension Data_PbUserDeviceRinseDryMessageSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceRinseDryMessageSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_count"),
    2: .standard(proto: "last_modified"),
  ]

  public var isInitialized: Bool {
    if self._messageCount == nil {return false}
    if self._lastModified == nil {return false}
    if let v = self._lastModified, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._messageCount) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._messageCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastModified {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceRinseDryMessageSettings, rhs: Data_PbUserDeviceRinseDryMessageSettings) -> Bool {
    if lhs._messageCount != rhs._messageCount {return false}
    if lhs._lastModified != rhs._lastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceMassStorageSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceMassStorageSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public var isInitialized: Bool {
    if self._enabled == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceMassStorageSettings, rhs: Data_PbUserDeviceMassStorageSettings) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbTimedDoNotDisturbSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbTimedDoNotDisturbSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  public var isInitialized: Bool {
    if let v = self._start, !v.isInitialized {return false}
    if let v = self._end, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbTimedDoNotDisturbSettings, rhs: Data_PbTimedDoNotDisturbSettings) -> Bool {
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceDoNotDisturbSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceDoNotDisturbSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "do_not_disturb_on"),
    2: .standard(proto: "setting_source"),
  ]

  public var isInitialized: Bool {
    if self._doNotDisturbOn == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._doNotDisturbOn) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._settingSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._doNotDisturbOn {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._settingSource {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceDoNotDisturbSettings, rhs: Data_PbUserDeviceDoNotDisturbSettings) -> Bool {
    if lhs._doNotDisturbOn != rhs._doNotDisturbOn {return false}
    if lhs._settingSource != rhs._settingSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceDoNotDisturbSettings.PbDoNotDisturbSettingSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOURCE_USER"),
    1: .same(proto: "SOURCE_TIMED"),
  ]
}

extension Data_PbUserDeviceDoNotDisturbSettings_v2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceDoNotDisturbSettings_v2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "timed_settings"),
  ]

  public var isInitialized: Bool {
    if let v = self._timedSettings, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._state) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timedSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._state {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timedSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceDoNotDisturbSettings_v2, rhs: Data_PbUserDeviceDoNotDisturbSettings_v2) -> Bool {
    if lhs._state != rhs._state {return false}
    if lhs._timedSettings != rhs._timedSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceDoNotDisturbSettings_v2.PbDoNotDisturbState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "ON"),
    2: .same(proto: "TIMED"),
  ]
}

extension Data_PbUserDeviceAutoSyncSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceAutoSyncSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public var isInitialized: Bool {
    if self._enabled == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceAutoSyncSettings, rhs: Data_PbUserDeviceAutoSyncSettings) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceAutomaticSampleSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceAutomaticSampleSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ohr_247_enabled"),
  ]

  public var isInitialized: Bool {
    if self._ohr247Enabled == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._ohr247Enabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ohr247Enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceAutomaticSampleSettings, rhs: Data_PbUserDeviceAutomaticSampleSettings) -> Bool {
    if lhs._ohr247Enabled != rhs._ohr247Enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbTimedMeasurementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbTimedMeasurementSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
  ]

  public var isInitialized: Bool {
    if let v = self._startTime, !v.isInitialized {return false}
    if let v = self._endTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbTimedMeasurementSettings, rhs: Data_PbTimedMeasurementSettings) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbIntelligentTimedMeasurementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbIntelligentTimedMeasurementSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
  ]

  public var isInitialized: Bool {
    if let v = self._startTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbIntelligentTimedMeasurementSettings, rhs: Data_PbIntelligentTimedMeasurementSettings) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbAutomaticMeasurementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbAutomaticMeasurementSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "timed_settings"),
    3: .standard(proto: "intelligent_timed_settings"),
  ]

  public var isInitialized: Bool {
    if let v = self._timedSettings, !v.isInitialized {return false}
    if let v = self._intelligentTimedSettings, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._state) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timedSettings) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._intelligentTimedSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._state {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timedSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._intelligentTimedSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbAutomaticMeasurementSettings, rhs: Data_PbAutomaticMeasurementSettings) -> Bool {
    if lhs._state != rhs._state {return false}
    if lhs._timedSettings != rhs._timedSettings {return false}
    if lhs._intelligentTimedSettings != rhs._intelligentTimedSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbAutomaticMeasurementSettings.PbAutomaticMeasurementState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "ALWAYS_ON"),
    2: .same(proto: "INTELLIGENT_TIMED"),
    3: .same(proto: "TIMED"),
  ]
}

extension Data_PbUserAutomaticMeasurementSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserAutomaticMeasurementSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "automatic_ohr_measurement"),
  ]

  public var isInitialized: Bool {
    if let v = self._automaticOhrMeasurement, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._automaticOhrMeasurement) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._automaticOhrMeasurement {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserAutomaticMeasurementSettings, rhs: Data_PbUserAutomaticMeasurementSettings) -> Bool {
    if lhs._automaticOhrMeasurement != rhs._automaticOhrMeasurement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceStravaSegmentsSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceStravaSegmentsSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
  ]

  public var isInitialized: Bool {
    if self._enabled == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._enabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceStravaSegmentsSettings, rhs: Data_PbUserDeviceStravaSegmentsSettings) -> Bool {
    if lhs._enabled != rhs._enabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceDaylightSaving: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceDaylightSaving"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "next_daylight_saving_time"),
    2: .same(proto: "offset"),
  ]

  public var isInitialized: Bool {
    if self._nextDaylightSavingTime == nil {return false}
    if self._offset == nil {return false}
    if let v = self._nextDaylightSavingTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._nextDaylightSavingTime) }()
      case 2: try { try decoder.decodeSingularSInt32Field(value: &self._offset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._nextDaylightSavingTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._offset {
      try visitor.visitSingularSInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceDaylightSaving, rhs: Data_PbUserDeviceDaylightSaving) -> Bool {
    if lhs._nextDaylightSavingTime != rhs._nextDaylightSavingTime {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUserDeviceRecoveryProSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceRecoveryProSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recovery_pro_enabled"),
  ]

  public var isInitialized: Bool {
    if self._recoveryProEnabled == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._recoveryProEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._recoveryProEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceRecoveryProSettings, rhs: Data_PbUserDeviceRecoveryProSettings) -> Bool {
    if lhs._recoveryProEnabled != rhs._recoveryProEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbSatelliteSystemSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbSatelliteSystemSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gps_enabled"),
    2: .standard(proto: "glonass_enabled"),
    3: .standard(proto: "galileo_enabled"),
    4: .standard(proto: "sbas_enabled"),
    5: .standard(proto: "beidou_enabled"),
    6: .standard(proto: "qzss_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._gpsEnabled) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._glonassEnabled) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._galileoEnabled) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._sbasEnabled) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._beidouEnabled) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._qzssEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gpsEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._glonassEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._galileoEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._sbasEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._beidouEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._qzssEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbSatelliteSystemSettings, rhs: Data_PbSatelliteSystemSettings) -> Bool {
    if lhs._gpsEnabled != rhs._gpsEnabled {return false}
    if lhs._glonassEnabled != rhs._glonassEnabled {return false}
    if lhs._galileoEnabled != rhs._galileoEnabled {return false}
    if lhs._sbasEnabled != rhs._sbasEnabled {return false}
    if lhs._beidouEnabled != rhs._beidouEnabled {return false}
    if lhs._qzssEnabled != rhs._qzssEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbGnssSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbGnssSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "satellite_system_settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._satelliteSystemSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._satelliteSystemSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbGnssSettings, rhs: Data_PbGnssSettings) -> Bool {
    if lhs._satelliteSystemSettings != rhs._satelliteSystemSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbBreathingExerciseSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbBreathingExerciseSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .standard(proto: "target_inhale_duration"),
    3: .standard(proto: "target_exhale_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._targetInhaleDuration) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._targetExhaleDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._targetInhaleDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._targetExhaleDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbBreathingExerciseSettings, rhs: Data_PbBreathingExerciseSettings) -> Bool {
    if lhs._duration != rhs._duration {return false}
    if lhs._targetInhaleDuration != rhs._targetInhaleDuration {return false}
    if lhs._targetExhaleDuration != rhs._targetExhaleDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbRunningTestSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbRunningTestSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "initial_speed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._initialSpeed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._initialSpeed {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbRunningTestSettings, rhs: Data_PbRunningTestSettings) -> Bool {
    if lhs._initialSpeed != rhs._initialSpeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbMediaControlSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbMediaControlSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbMediaControlSettings, rhs: Data_PbMediaControlSettings) -> Bool {
    if lhs._mode != rhs._mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbMediaControlSettings.PbMediaControlMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALWAYS_OFF"),
    1: .same(proto: "ALWAYS_ON"),
    2: .same(proto: "ON_WHEN_TRAINING"),
    3: .same(proto: "ON_WHEN_NOT_TRAINING"),
  ]
}

extension Data_PbUserDeviceTelemetrySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceTelemetrySettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "telemetry_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._telemetryEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._telemetryEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceTelemetrySettings, rhs: Data_PbUserDeviceTelemetrySettings) -> Bool {
    if lhs._telemetryEnabled != rhs._telemetryEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUsbConnectionSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUsbConnectionSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUsbConnectionSettings, rhs: Data_PbUsbConnectionSettings) -> Bool {
    if lhs._mode != rhs._mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbUsbConnectionSettings.PbUsbConnectionMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OFF"),
    2: .same(proto: "ON"),
  ]
}

extension Data_PbUserDeviceSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PbUserDeviceSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "general_settings"),
    2: .standard(proto: "alarm_settings"),
    3: .standard(proto: "countdown_settings"),
    4: .standard(proto: "jumptest_settings"),
    5: .standard(proto: "interval_timer_settings"),
    6: .standard(proto: "end_time_estimator_settings"),
    7: .standard(proto: "research_settings"),
    8: .standard(proto: "safety_light_settings"),
    9: .standard(proto: "smart_watch_notification_settings"),
    10: .standard(proto: "map_settings"),
    11: .standard(proto: "rinse_dry_message_settings"),
    12: .standard(proto: "mass_storage_settings"),
    13: .standard(proto: "do_not_disturb_settings"),
    14: .standard(proto: "auto_sync_settings"),
    15: .standard(proto: "automatic_sample_settings"),
    16: .standard(proto: "strava_segments_settings"),
    17: .standard(proto: "daylight_saving"),
    18: .standard(proto: "recovery_pro_settings"),
    19: .standard(proto: "orthostatic_test_schedule"),
    20: .standard(proto: "do_not_disturb_settings_v2"),
    21: .standard(proto: "automatic_measurement_settings"),
    22: .standard(proto: "gnss_settings"),
    23: .standard(proto: "breathing_exercise_settings"),
    24: .standard(proto: "running_test_settings"),
    25: .standard(proto: "media_control_settings"),
    26: .standard(proto: "telemetry_settings"),
    27: .standard(proto: "usb_connection_settings"),
    101: .standard(proto: "last_modified"),
  ]

  fileprivate class _StorageClass {
    var _generalSettings: Data_PbUserDeviceGeneralSettings? = nil
    var _alarmSettings: Data_PbUserDeviceAlarmSettings? = nil
    var _countdownSettings: Data_PbUserDeviceCountdownSettings? = nil
    var _jumptestSettings: Data_PbUserDeviceJumpTestSettings? = nil
    var _intervalTimerSettings: Data_PbUserIntervalTimerSettings? = nil
    var _endTimeEstimatorSettings: Data_PbUserEndTimeEstimatorSettings? = nil
    var _researchSettings: Data_PbUserDeviceResearchSettings? = nil
    var _safetyLightSettings: Data_PbUserSafetyLightSettings? = nil
    var _smartWatchNotificationSettings: Data_PbUserSmartWatchNotificationSettings? = nil
    var _mapSettings: Data_PbUserMapSettings? = nil
    var _rinseDryMessageSettings: Data_PbUserDeviceRinseDryMessageSettings? = nil
    var _massStorageSettings: Data_PbUserDeviceMassStorageSettings? = nil
    var _doNotDisturbSettings: Data_PbUserDeviceDoNotDisturbSettings? = nil
    var _autoSyncSettings: Data_PbUserDeviceAutoSyncSettings? = nil
    var _automaticSampleSettings: Data_PbUserDeviceAutomaticSampleSettings? = nil
    var _stravaSegmentsSettings: Data_PbUserDeviceStravaSegmentsSettings? = nil
    var _daylightSaving: Data_PbUserDeviceDaylightSaving? = nil
    var _recoveryProSettings: Data_PbUserDeviceRecoveryProSettings? = nil
    var _orthostaticTestSchedule: Data_PbOrthostaticTestSchedule? = nil
    var _doNotDisturbSettingsV2: Data_PbUserDeviceDoNotDisturbSettings_v2? = nil
    var _automaticMeasurementSettings: Data_PbUserAutomaticMeasurementSettings? = nil
    var _gnssSettings: Data_PbGnssSettings? = nil
    var _breathingExerciseSettings: Data_PbBreathingExerciseSettings? = nil
    var _runningTestSettings: Data_PbRunningTestSettings? = nil
    var _mediaControlSettings: Data_PbMediaControlSettings? = nil
    var _telemetrySettings: Data_PbUserDeviceTelemetrySettings? = nil
    var _usbConnectionSettings: Data_PbUsbConnectionSettings? = nil
    var _lastModified: PbSystemDateTime? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _generalSettings = source._generalSettings
      _alarmSettings = source._alarmSettings
      _countdownSettings = source._countdownSettings
      _jumptestSettings = source._jumptestSettings
      _intervalTimerSettings = source._intervalTimerSettings
      _endTimeEstimatorSettings = source._endTimeEstimatorSettings
      _researchSettings = source._researchSettings
      _safetyLightSettings = source._safetyLightSettings
      _smartWatchNotificationSettings = source._smartWatchNotificationSettings
      _mapSettings = source._mapSettings
      _rinseDryMessageSettings = source._rinseDryMessageSettings
      _massStorageSettings = source._massStorageSettings
      _doNotDisturbSettings = source._doNotDisturbSettings
      _autoSyncSettings = source._autoSyncSettings
      _automaticSampleSettings = source._automaticSampleSettings
      _stravaSegmentsSettings = source._stravaSegmentsSettings
      _daylightSaving = source._daylightSaving
      _recoveryProSettings = source._recoveryProSettings
      _orthostaticTestSchedule = source._orthostaticTestSchedule
      _doNotDisturbSettingsV2 = source._doNotDisturbSettingsV2
      _automaticMeasurementSettings = source._automaticMeasurementSettings
      _gnssSettings = source._gnssSettings
      _breathingExerciseSettings = source._breathingExerciseSettings
      _runningTestSettings = source._runningTestSettings
      _mediaControlSettings = source._mediaControlSettings
      _telemetrySettings = source._telemetrySettings
      _usbConnectionSettings = source._usbConnectionSettings
      _lastModified = source._lastModified
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._generalSettings == nil {return false}
      if _storage._lastModified == nil {return false}
      if let v = _storage._generalSettings, !v.isInitialized {return false}
      if let v = _storage._alarmSettings, !v.isInitialized {return false}
      if let v = _storage._countdownSettings, !v.isInitialized {return false}
      if let v = _storage._jumptestSettings, !v.isInitialized {return false}
      if let v = _storage._intervalTimerSettings, !v.isInitialized {return false}
      if let v = _storage._safetyLightSettings, !v.isInitialized {return false}
      if let v = _storage._smartWatchNotificationSettings, !v.isInitialized {return false}
      if let v = _storage._mapSettings, !v.isInitialized {return false}
      if let v = _storage._rinseDryMessageSettings, !v.isInitialized {return false}
      if let v = _storage._massStorageSettings, !v.isInitialized {return false}
      if let v = _storage._doNotDisturbSettings, !v.isInitialized {return false}
      if let v = _storage._autoSyncSettings, !v.isInitialized {return false}
      if let v = _storage._automaticSampleSettings, !v.isInitialized {return false}
      if let v = _storage._stravaSegmentsSettings, !v.isInitialized {return false}
      if let v = _storage._daylightSaving, !v.isInitialized {return false}
      if let v = _storage._recoveryProSettings, !v.isInitialized {return false}
      if let v = _storage._doNotDisturbSettingsV2, !v.isInitialized {return false}
      if let v = _storage._automaticMeasurementSettings, !v.isInitialized {return false}
      if let v = _storage._lastModified, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._generalSettings) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._alarmSettings) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._countdownSettings) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._jumptestSettings) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._intervalTimerSettings) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._endTimeEstimatorSettings) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._researchSettings) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._safetyLightSettings) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._smartWatchNotificationSettings) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._mapSettings) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._rinseDryMessageSettings) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._massStorageSettings) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._doNotDisturbSettings) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._autoSyncSettings) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._automaticSampleSettings) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._stravaSegmentsSettings) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._daylightSaving) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._recoveryProSettings) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._orthostaticTestSchedule) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._doNotDisturbSettingsV2) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._automaticMeasurementSettings) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._gnssSettings) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._breathingExerciseSettings) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._runningTestSettings) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._mediaControlSettings) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._telemetrySettings) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._usbConnectionSettings) }()
        case 101: try { try decoder.decodeSingularMessageField(value: &_storage._lastModified) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._generalSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._alarmSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._countdownSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._jumptestSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._intervalTimerSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._endTimeEstimatorSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._researchSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._safetyLightSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._smartWatchNotificationSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._mapSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._rinseDryMessageSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._massStorageSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._doNotDisturbSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._autoSyncSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._automaticSampleSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._stravaSegmentsSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._daylightSaving {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._recoveryProSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._orthostaticTestSchedule {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._doNotDisturbSettingsV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._automaticMeasurementSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._gnssSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._breathingExerciseSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._runningTestSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._mediaControlSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._telemetrySettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._usbConnectionSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._lastModified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Data_PbUserDeviceSettings, rhs: Data_PbUserDeviceSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._generalSettings != rhs_storage._generalSettings {return false}
        if _storage._alarmSettings != rhs_storage._alarmSettings {return false}
        if _storage._countdownSettings != rhs_storage._countdownSettings {return false}
        if _storage._jumptestSettings != rhs_storage._jumptestSettings {return false}
        if _storage._intervalTimerSettings != rhs_storage._intervalTimerSettings {return false}
        if _storage._endTimeEstimatorSettings != rhs_storage._endTimeEstimatorSettings {return false}
        if _storage._researchSettings != rhs_storage._researchSettings {return false}
        if _storage._safetyLightSettings != rhs_storage._safetyLightSettings {return false}
        if _storage._smartWatchNotificationSettings != rhs_storage._smartWatchNotificationSettings {return false}
        if _storage._mapSettings != rhs_storage._mapSettings {return false}
        if _storage._rinseDryMessageSettings != rhs_storage._rinseDryMessageSettings {return false}
        if _storage._massStorageSettings != rhs_storage._massStorageSettings {return false}
        if _storage._doNotDisturbSettings != rhs_storage._doNotDisturbSettings {return false}
        if _storage._autoSyncSettings != rhs_storage._autoSyncSettings {return false}
        if _storage._automaticSampleSettings != rhs_storage._automaticSampleSettings {return false}
        if _storage._stravaSegmentsSettings != rhs_storage._stravaSegmentsSettings {return false}
        if _storage._daylightSaving != rhs_storage._daylightSaving {return false}
        if _storage._recoveryProSettings != rhs_storage._recoveryProSettings {return false}
        if _storage._orthostaticTestSchedule != rhs_storage._orthostaticTestSchedule {return false}
        if _storage._doNotDisturbSettingsV2 != rhs_storage._doNotDisturbSettingsV2 {return false}
        if _storage._automaticMeasurementSettings != rhs_storage._automaticMeasurementSettings {return false}
        if _storage._gnssSettings != rhs_storage._gnssSettings {return false}
        if _storage._breathingExerciseSettings != rhs_storage._breathingExerciseSettings {return false}
        if _storage._runningTestSettings != rhs_storage._runningTestSettings {return false}
        if _storage._mediaControlSettings != rhs_storage._mediaControlSettings {return false}
        if _storage._telemetrySettings != rhs_storage._telemetrySettings {return false}
        if _storage._usbConnectionSettings != rhs_storage._usbConnectionSettings {return false}
        if _storage._lastModified != rhs_storage._lastModified {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
