// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: training_session.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// TSESS.BPB=PbTrainingSession

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Data_PbSessionHeartRateStatistics {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// range [0 - 250] (1/min)
    public var average: UInt32 {
    get {return _average ?? 0}
    set {_average = newValue}
  }
  /// Returns true if `average` has been explicitly set.
  var hasAverage: Bool {return self._average != nil}
  /// Clears the value of `average`. Subsequent reads from it will return its default value.
  mutating func clearAverage() {self._average = nil}

  /// range [0 - 250] (1/min)
    public var maximum: UInt32 {
    get {return _maximum ?? 0}
    set {_maximum = newValue}
  }
  /// Returns true if `maximum` has been explicitly set.
  var hasMaximum: Bool {return self._maximum != nil}
  /// Clears the value of `maximum`. Subsequent reads from it will return its default value.
  mutating func clearMaximum() {self._maximum = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

  fileprivate var _average: UInt32? = nil
  fileprivate var _maximum: UInt32? = nil
}

public struct Data_PbTrainingSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Session starting date & time
  /// Note: see comments in exercise_base.proto:start
  public var start: PbLocalDateTime {
    get {return _storage._start ?? PbLocalDateTime()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {_uniqueStorage()._start = nil}

  /// range [value should be in the past of current time and after start]
  /// wrist units local time at the time when training session was stopped
    public var end: PbLocalDateTime {
    get {return _storage._end ?? PbLocalDateTime()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {_uniqueStorage()._end = nil}

  /// Number of exercises
  /// range [1 - 998]
    public var exerciseCount: UInt32 {
    get {return _storage._exerciseCount ?? 0}
    set {_uniqueStorage()._exerciseCount = newValue}
  }
  /// Returns true if `exerciseCount` has been explicitly set.
  var hasExerciseCount: Bool {return _storage._exerciseCount != nil}
  /// Clears the value of `exerciseCount`. Subsequent reads from it will return its default value.
  mutating func clearExerciseCount() {_uniqueStorage()._exerciseCount = nil}

  /// Device ID for identification purposes.
    public var deviceID: String {
    get {return _storage._deviceID ?? String()}
    set {_uniqueStorage()._deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return _storage._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {_uniqueStorage()._deviceID = nil}

  /// Human readable model name, like "RCX 5"
  /// Also known as "product name"
    public var modelName: String {
    get {return _storage._modelName ?? String()}
    set {_uniqueStorage()._modelName = newValue}
  }
  /// Returns true if `modelName` has been explicitly set.
  var hasModelName: Bool {return _storage._modelName != nil}
  /// Clears the value of `modelName`. Subsequent reads from it will return its default value.
  mutating func clearModelName() {_uniqueStorage()._modelName = nil}

  /// Total session duration (does not contain paused times)
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
    public var duration: PbDuration {
    get {return _storage._duration ?? PbDuration()}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  /// Total session distance
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
    public var distance: Float {
    get {return _storage._distance ?? 0}
    set {_uniqueStorage()._distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  var hasDistance: Bool {return _storage._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  mutating func clearDistance() {_uniqueStorage()._distance = nil}

  /// Total session calories
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
  /// range [0 - 65535] kcal
    public var calories: UInt32 {
    get {return _storage._calories ?? 0}
    set {_uniqueStorage()._calories = newValue}
  }
  /// Returns true if `calories` has been explicitly set.
  var hasCalories: Bool {return _storage._calories != nil}
  /// Clears the value of `calories`. Subsequent reads from it will return its default value.
  mutating func clearCalories() {_uniqueStorage()._calories = nil}

  /// Total session heart rate statistics (avg/max)
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
    public var heartRate: Data_PbSessionHeartRateStatistics {
    get {return _storage._heartRate ?? Data_PbSessionHeartRateStatistics()}
    set {_uniqueStorage()._heartRate = newValue}
  }
  /// Returns true if `heartRate` has been explicitly set.
  var hasHeartRate: Bool {return _storage._heartRate != nil}
  /// Clears the value of `heartRate`. Subsequent reads from it will return its default value.
  mutating func clearHeartRate() {_uniqueStorage()._heartRate = nil}

  /// Total session heart rate zone durations
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
  public var heartRateZoneDuration: [PbDuration] {
    get {return _storage._heartRateZoneDuration}
    set {_uniqueStorage()._heartRateZoneDuration = newValue}
  }

  /// Total session training load
  /// Filled by service layer when storing external training session to the file system for week summaries, etc.
    public var trainingLoad: PbTrainingLoad {
    get {return _storage._trainingLoad ?? PbTrainingLoad()}
    set {_uniqueStorage()._trainingLoad = newValue}
  }
  /// Returns true if `trainingLoad` has been explicitly set.
    public var hasTrainingLoad: Bool {return _storage._trainingLoad != nil}
  /// Clears the value of `trainingLoad`. Subsequent reads from it will return its default value.
  mutating func clearTrainingLoad() {_uniqueStorage()._trainingLoad = nil}

  /// Name of the session
    public var sessionName: PbOneLineText {
    get {return _storage._sessionName ?? PbOneLineText()}
    set {_uniqueStorage()._sessionName = newValue}
  }
  /// Returns true if `sessionName` has been explicitly set.
  var hasSessionName: Bool {return _storage._sessionName != nil}
  /// Clears the value of `sessionName`. Subsequent reads from it will return its default value.
  mutating func clearSessionName() {_uniqueStorage()._sessionName = nil}

  /// Feeling of the session
    public var feeling: Float {
    get {return _storage._feeling ?? 0}
    set {_uniqueStorage()._feeling = newValue}
  }
  /// Returns true if `feeling` has been explicitly set.
  var hasFeeling: Bool {return _storage._feeling != nil}
  /// Clears the value of `feeling`. Subsequent reads from it will return its default value.
  mutating func clearFeeling() {_uniqueStorage()._feeling = nil}

  /// Note for the session
    public var note: PbMultiLineText {
    get {return _storage._note ?? PbMultiLineText()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
    public var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  mutating func clearNote() {_uniqueStorage()._note = nil}

  /// Place of the session
    public var place: PbOneLineText {
    get {return _storage._place ?? PbOneLineText()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
    public var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  /// Latitude where session started
    public var latitude: Double {
    get {return _storage._latitude ?? 0}
    set {_uniqueStorage()._latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
    public var hasLatitude: Bool {return _storage._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  mutating func clearLatitude() {_uniqueStorage()._latitude = nil}

  /// Longitude where session started
    public var longitude: Double {
    get {return _storage._longitude ?? 0}
    set {_uniqueStorage()._longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
    public var hasLongitude: Bool {return _storage._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  mutating func clearLongitude() {_uniqueStorage()._longitude = nil}

  /// Training Session feedback
    public var benefit: PbExerciseFeedback {
    get {return _storage._benefit ?? .feedbackNone}
    set {_uniqueStorage()._benefit = newValue}
  }
  /// Returns true if `benefit` has been explicitly set.
    public var hasBenefit: Bool {return _storage._benefit != nil}
  /// Clears the value of `benefit`. Subsequent reads from it will return its default value.
  mutating func clearBenefit() {_uniqueStorage()._benefit = nil}

  /// Sport identifier in case the session was based on multisport
  /// Only multisport sport ids should be used here
    public var sport: PbSportIdentifier {
    get {return _storage._sport ?? PbSportIdentifier()}
    set {_uniqueStorage()._sport = newValue}
  }
  /// Returns true if `sport` has been explicitly set.
    public var hasSport: Bool {return _storage._sport != nil}
  /// Clears the value of `sport`. Subsequent reads from it will return its default value.
  mutating func clearSport() {_uniqueStorage()._sport = nil}

  /// This is set if user selected training session target from diary
  /// This id is the identifier in targets ID.BPB file
  /// This value should be set only for planned training session targets and not for favourite targets
    public var trainingSessionTargetID: PbTrainingSessionTargetId {
    get {return _storage._trainingSessionTargetID ?? PbTrainingSessionTargetId()}
    set {_uniqueStorage()._trainingSessionTargetID = newValue}
  }
  /// Returns true if `trainingSessionTargetID` has been explicitly set.
    public var hasTrainingSessionTargetID: Bool {return _storage._trainingSessionTargetID != nil}
  /// Clears the value of `trainingSessionTargetID`. Subsequent reads from it will return its default value.
  mutating func clearTrainingSessionTargetID() {_uniqueStorage()._trainingSessionTargetID = nil}

  /// This is set if user selected training session target from favorites
  /// This id is the identifier in targets ID.BPB file
  /// This value should be set only for favorite training session targets and not for planned targets
  /// Note: The ID value is set to 0 (not null) for favourites which are not actually in the Flow service.
  ///       For example in V800 race pace target can be started from the favourites menu.
    public var trainingSessionFavoriteID: PbTrainingSessionFavoriteId {
    get {return _storage._trainingSessionFavoriteID ?? PbTrainingSessionFavoriteId()}
    set {_uniqueStorage()._trainingSessionFavoriteID = newValue}
  }
  /// Returns true if `trainingSessionFavoriteID` has been explicitly set.
    public var hasTrainingSessionFavoriteID: Bool {return _storage._trainingSessionFavoriteID != nil}
  /// Clears the value of `trainingSessionFavoriteID`. Subsequent reads from it will return its default value.
  mutating func clearTrainingSessionFavoriteID() {_uniqueStorage()._trainingSessionFavoriteID = nil}

  /// Service's ecosystem application id
    public var applicationID: PbApplicationId {
    get {return _storage._applicationID ?? PbApplicationId()}
    set {_uniqueStorage()._applicationID = newValue}
  }
  /// Returns true if `applicationID` has been explicitly set.
    public var hasApplicationID: Bool {return _storage._applicationID != nil}
  /// Clears the value of `applicationID`. Subsequent reads from it will return its default value.
  mutating func clearApplicationID() {_uniqueStorage()._applicationID = nil}

  /// Cardio load of the session
    public var cardioLoad: PbCardioLoad {
    get {return _storage._cardioLoad ?? PbCardioLoad()}
    set {_uniqueStorage()._cardioLoad = newValue}
  }
  /// Returns true if `cardioLoad` has been explicitly set.
    public var hasCardioLoad: Bool {return _storage._cardioLoad != nil}
  /// Clears the value of `cardioLoad`. Subsequent reads from it will return its default value.
  mutating func clearCardioLoad() {_uniqueStorage()._cardioLoad = nil}

  /// "Hardness": comparison of cardio load to 90 day average [ 1...5 = very low...very high ]
    public  var cardioLoadInterpretation: UInt32 {
    get {return _storage._cardioLoadInterpretation ?? 0}
    set {_uniqueStorage()._cardioLoadInterpretation = newValue}
  }
  /// Returns true if `cardioLoadInterpretation` has been explicitly set.
    public var hasCardioLoadInterpretation: Bool {return _storage._cardioLoadInterpretation != nil}
  /// Clears the value of `cardioLoadInterpretation`. Subsequent reads from it will return its default value.
  mutating func clearCardioLoadInterpretation() {_uniqueStorage()._cardioLoadInterpretation = nil}

  /// Perceived load of the session
    public var perceivedLoad: PbPerceivedLoad {
    get {return _storage._perceivedLoad ?? PbPerceivedLoad()}
    set {_uniqueStorage()._perceivedLoad = newValue}
  }
  /// Returns true if `perceivedLoad` has been explicitly set.
    public var hasPerceivedLoad: Bool {return _storage._perceivedLoad != nil}
  /// Clears the value of `perceivedLoad`. Subsequent reads from it will return its default value.
  mutating func clearPerceivedLoad() {_uniqueStorage()._perceivedLoad = nil}

  /// "Hardness": comparison of perceived load to 90 day average [ 1...5 = very low...very high ]
    public var perceivedLoadInterpretation: UInt32 {
    get {return _storage._perceivedLoadInterpretation ?? 0}
    set {_uniqueStorage()._perceivedLoadInterpretation = newValue}
  }
  /// Returns true if `perceivedLoadInterpretation` has been explicitly set.
    public var hasPerceivedLoadInterpretation: Bool {return _storage._perceivedLoadInterpretation != nil}
  /// Clears the value of `perceivedLoadInterpretation`. Subsequent reads from it will return its default value.
  mutating func clearPerceivedLoadInterpretation() {_uniqueStorage()._perceivedLoadInterpretation = nil}

  /// Muscle load of the session, calculated from running or cycling power (kJ)
    public var muscleLoad: Float {
    get {return _storage._muscleLoad ?? 0}
    set {_uniqueStorage()._muscleLoad = newValue}
  }
  /// Returns true if `muscleLoad` has been explicitly set.
    public var hasMuscleLoad: Bool {return _storage._muscleLoad != nil}
  /// Clears the value of `muscleLoad`. Subsequent reads from it will return its default value.
  mutating func clearMuscleLoad() {_uniqueStorage()._muscleLoad = nil}

  /// "Hardness": comparison of cardio load to 90 day average [ 1...5 = very low...very high ]
    public var muscleLoadInterpretation: UInt32 {
    get {return _storage._muscleLoadInterpretation ?? 0}
    set {_uniqueStorage()._muscleLoadInterpretation = newValue}
  }
  /// Returns true if `muscleLoadInterpretation` has been explicitly set.
    public var hasMuscleLoadInterpretation: Bool {return _storage._muscleLoadInterpretation != nil}
  /// Clears the value of `muscleLoadInterpretation`. Subsequent reads from it will return its default value.
  mutating func clearMuscleLoadInterpretation() {_uniqueStorage()._muscleLoadInterpretation = nil}

  /// UUID of the period data for this session (16 bytes in big endian format)
    public var periodUuid: Data {
    get {return _storage._periodUuid ?? Data()}
    set {_uniqueStorage()._periodUuid = newValue}
  }
  /// Returns true if `periodUuid` has been explicitly set.
    public var hasPeriodUuid: Bool {return _storage._periodUuid != nil}
  /// Clears the value of `periodUuid`. Subsequent reads from it will return its default value.
  mutating func clearPeriodUuid() {_uniqueStorage()._periodUuid = nil}

  /// Training session start trigger
    public var startTrigger: Data_PbTrainingSession.PbTrainingStartTrigger {
    get {return _storage._startTrigger ?? .manual}
    set {_uniqueStorage()._startTrigger = newValue}
  }
  /// Returns true if `startTrigger` has been explicitly set.
  var hasStartTrigger: Bool {return _storage._startTrigger != nil}
  /// Clears the value of `startTrigger`. Subsequent reads from it will return its default value.
  mutating func clearStartTrigger() {_uniqueStorage()._startTrigger = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Session start trigger
    public enum PbTrainingStartTrigger: SwiftProtobuf.Enum {
        public typealias RawValue = Int
    case manual // = 0
    case automaticTrainingDetection // = 1

        public init() {
      self = .manual
    }

        public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .manual
      case 1: self = .automaticTrainingDetection
      default: return nil
      }
    }

        public var rawValue: Int {
      switch self {
      case .manual: return 0
      case .automaticTrainingDetection: return 1
      }
    }

  }

    public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Data_PbTrainingSession.PbTrainingStartTrigger: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Data_PbSessionHeartRateStatistics: @unchecked Sendable {}
extension Data_PbTrainingSession: @unchecked Sendable {}
extension Data_PbTrainingSession.PbTrainingStartTrigger: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbSessionHeartRateStatistics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PbSessionHeartRateStatistics"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "average"),
    2: .same(proto: "maximum"),
  ]

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._average) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._maximum) }()
      default: break
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._average {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maximum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: Data_PbSessionHeartRateStatistics, rhs: Data_PbSessionHeartRateStatistics) -> Bool {
    if lhs._average != rhs._average {return false}
    if lhs._maximum != rhs._maximum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbTrainingSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PbTrainingSession"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    20: .same(proto: "end"),
    2: .standard(proto: "exercise_count"),
    3: .standard(proto: "device_id"),
    4: .standard(proto: "model_name"),
    5: .same(proto: "duration"),
    6: .same(proto: "distance"),
    7: .same(proto: "calories"),
    8: .standard(proto: "heart_rate"),
    9: .standard(proto: "heart_rate_zone_duration"),
    10: .standard(proto: "training_load"),
    11: .standard(proto: "session_name"),
    12: .same(proto: "feeling"),
    13: .same(proto: "note"),
    14: .same(proto: "place"),
    15: .same(proto: "latitude"),
    16: .same(proto: "longitude"),
    17: .same(proto: "benefit"),
    18: .same(proto: "sport"),
    19: .standard(proto: "training_session_target_id"),
    21: .standard(proto: "training_session_favorite_id"),
    22: .standard(proto: "application_id"),
    23: .standard(proto: "cardio_load"),
    24: .standard(proto: "cardio_load_interpretation"),
    25: .standard(proto: "perceived_load"),
    26: .standard(proto: "perceived_load_interpretation"),
    27: .standard(proto: "muscle_load"),
    28: .standard(proto: "muscle_load_interpretation"),
    29: .standard(proto: "period_uuid"),
    30: .standard(proto: "start_trigger"),
  ]

  fileprivate class _StorageClass {
    var _start: PbLocalDateTime? = nil
    var _end: PbLocalDateTime? = nil
    var _exerciseCount: UInt32? = nil
    var _deviceID: String? = nil
    var _modelName: String? = nil
    var _duration: PbDuration? = nil
    var _distance: Float? = nil
    var _calories: UInt32? = nil
    var _heartRate: Data_PbSessionHeartRateStatistics? = nil
    var _heartRateZoneDuration: [PbDuration] = []
    var _trainingLoad: PbTrainingLoad? = nil
    var _sessionName: PbOneLineText? = nil
    var _feeling: Float? = nil
    var _note: PbMultiLineText? = nil
    var _place: PbOneLineText? = nil
    var _latitude: Double? = nil
    var _longitude: Double? = nil
    var _benefit: PbExerciseFeedback? = nil
    var _sport: PbSportIdentifier? = nil
    var _trainingSessionTargetID: PbTrainingSessionTargetId? = nil
    var _trainingSessionFavoriteID: PbTrainingSessionFavoriteId? = nil
    var _applicationID: PbApplicationId? = nil
    var _cardioLoad: PbCardioLoad? = nil
    var _cardioLoadInterpretation: UInt32? = nil
    var _perceivedLoad: PbPerceivedLoad? = nil
    var _perceivedLoadInterpretation: UInt32? = nil
    var _muscleLoad: Float? = nil
    var _muscleLoadInterpretation: UInt32? = nil
    var _periodUuid: Data? = nil
    var _startTrigger: Data_PbTrainingSession.PbTrainingStartTrigger? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
      _exerciseCount = source._exerciseCount
      _deviceID = source._deviceID
      _modelName = source._modelName
      _duration = source._duration
      _distance = source._distance
      _calories = source._calories
      _heartRate = source._heartRate
      _heartRateZoneDuration = source._heartRateZoneDuration
      _trainingLoad = source._trainingLoad
      _sessionName = source._sessionName
      _feeling = source._feeling
      _note = source._note
      _place = source._place
      _latitude = source._latitude
      _longitude = source._longitude
      _benefit = source._benefit
      _sport = source._sport
      _trainingSessionTargetID = source._trainingSessionTargetID
      _trainingSessionFavoriteID = source._trainingSessionFavoriteID
      _applicationID = source._applicationID
      _cardioLoad = source._cardioLoad
      _cardioLoadInterpretation = source._cardioLoadInterpretation
      _perceivedLoad = source._perceivedLoad
      _perceivedLoadInterpretation = source._perceivedLoadInterpretation
      _muscleLoad = source._muscleLoad
      _muscleLoadInterpretation = source._muscleLoadInterpretation
      _periodUuid = source._periodUuid
      _startTrigger = source._startTrigger
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._start == nil {return false}
      if _storage._exerciseCount == nil {return false}
      if let v = _storage._start, !v.isInitialized {return false}
      if let v = _storage._end, !v.isInitialized {return false}
      if let v = _storage._trainingLoad, !v.isInitialized {return false}
      if let v = _storage._sessionName, !v.isInitialized {return false}
      if let v = _storage._note, !v.isInitialized {return false}
      if let v = _storage._place, !v.isInitialized {return false}
      if let v = _storage._sport, !v.isInitialized {return false}
      if let v = _storage._trainingSessionTargetID, !v.isInitialized {return false}
      if let v = _storage._trainingSessionFavoriteID, !v.isInitialized {return false}
      if let v = _storage._applicationID, !v.isInitialized {return false}
      if let v = _storage._cardioLoad, !v.isInitialized {return false}
      if let v = _storage._perceivedLoad, !v.isInitialized {return false}
      return true
    }
  }

    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._start) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._exerciseCount) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._deviceID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._modelName) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._duration) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._distance) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._calories) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._heartRate) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._heartRateZoneDuration) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._trainingLoad) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._sessionName) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._feeling) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._note) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._place) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._latitude) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._longitude) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._benefit) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._sport) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._trainingSessionTargetID) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._end) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._trainingSessionFavoriteID) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._applicationID) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._cardioLoad) }()
        case 24: try { try decoder.decodeSingularUInt32Field(value: &_storage._cardioLoadInterpretation) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._perceivedLoad) }()
        case 26: try { try decoder.decodeSingularUInt32Field(value: &_storage._perceivedLoadInterpretation) }()
        case 27: try { try decoder.decodeSingularFloatField(value: &_storage._muscleLoad) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._muscleLoadInterpretation) }()
        case 29: try { try decoder.decodeSingularBytesField(value: &_storage._periodUuid) }()
        case 30: try { try decoder.decodeSingularEnumField(value: &_storage._startTrigger) }()
        default: break
        }
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._exerciseCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._deviceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._modelName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._duration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._distance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._calories {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._heartRate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._heartRateZoneDuration.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._heartRateZoneDuration, fieldNumber: 9)
      }
      try { if let v = _storage._trainingLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._sessionName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._feeling {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._note {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._latitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._longitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._benefit {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._sport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._trainingSessionTargetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._trainingSessionFavoriteID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._applicationID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._cardioLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._cardioLoadInterpretation {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._perceivedLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._perceivedLoadInterpretation {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._muscleLoad {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._muscleLoadInterpretation {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._periodUuid {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._startTrigger {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 30)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: Data_PbTrainingSession, rhs: Data_PbTrainingSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._exerciseCount != rhs_storage._exerciseCount {return false}
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._modelName != rhs_storage._modelName {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._distance != rhs_storage._distance {return false}
        if _storage._calories != rhs_storage._calories {return false}
        if _storage._heartRate != rhs_storage._heartRate {return false}
        if _storage._heartRateZoneDuration != rhs_storage._heartRateZoneDuration {return false}
        if _storage._trainingLoad != rhs_storage._trainingLoad {return false}
        if _storage._sessionName != rhs_storage._sessionName {return false}
        if _storage._feeling != rhs_storage._feeling {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._latitude != rhs_storage._latitude {return false}
        if _storage._longitude != rhs_storage._longitude {return false}
        if _storage._benefit != rhs_storage._benefit {return false}
        if _storage._sport != rhs_storage._sport {return false}
        if _storage._trainingSessionTargetID != rhs_storage._trainingSessionTargetID {return false}
        if _storage._trainingSessionFavoriteID != rhs_storage._trainingSessionFavoriteID {return false}
        if _storage._applicationID != rhs_storage._applicationID {return false}
        if _storage._cardioLoad != rhs_storage._cardioLoad {return false}
        if _storage._cardioLoadInterpretation != rhs_storage._cardioLoadInterpretation {return false}
        if _storage._perceivedLoad != rhs_storage._perceivedLoad {return false}
        if _storage._perceivedLoadInterpretation != rhs_storage._perceivedLoadInterpretation {return false}
        if _storage._muscleLoad != rhs_storage._muscleLoad {return false}
        if _storage._muscleLoadInterpretation != rhs_storage._muscleLoadInterpretation {return false}
        if _storage._periodUuid != rhs_storage._periodUuid {return false}
        if _storage._startTrigger != rhs_storage._startTrigger {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbTrainingSession.PbTrainingStartTrigger: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MANUAL"),
    1: .same(proto: "AUTOMATIC_TRAINING_DETECTION"),
  ]
}
